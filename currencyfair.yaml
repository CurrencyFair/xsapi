---
openapi: 3.0.0
info:
  title: CurrencyFair eXternal Services API
  version: 2.0.0
  contact:
    name: Customer Support
    email: support@currencyfair.com
  x-logo:
    url: https://www.currencyfair.com/cf-content/themes/cfwp-2018/build/assets/svg/logos/logo-currencyfair.svg
  description: |
    # Introduction

    The CurrencyFair eXternal Services API is REST-ful API that allows approved API users to perform various
    operations on their CurrencyFair wallet.

    In order to use the API you will need to have a CurrencyFair account. You can [sign up here](https://app.currencyfair.com/register/personal#business).

    It is designed to be used by server-side clients, to allow our business and institutional clients to build
    their own integrations with our system.

    The production API server is https://xsapi.currencyfair.com

    The sandbox servers are assigned to users when they register as an API partner.

    The following headers can be attached to HTTPS calls to our API:
      - `x-api-key: <secret provided by CurrencyFair>` - must be sent in every request, grants access to the API (authentication is performed separately).
      - `Authentication: Bearer <api_token>` - must be set to authenticate the call. Read more in the [Authentication](#section/Authentication) section.
      - `Content-Type: application/json` - must be set on POST/PUT/PATCH calls when a JSON body payload is sent.
      - `Accept-Language: <two_letter_language_code>` - to set the language. Defaults to `en` if not provided. Currently supported languages: `en`, `fr`, `de`.

    In order to use our API you need to first signup as our API partner. Please contact our customer service
    to arrange this.

    Once you are our API partner, a new Sub User will be created under your company account. That Sub User will
    have its own long-lived Authorization Code that allows it to authenticate using the
    [authentication endpoint](#tag/Authentication).

    <SecurityDefinitions />

    **The Authorization Code must be stored in secure location, and never displayed to the public**.

    Sub Users can perform certain operations on behalf of their parent user, like Exchange, Transfer Out or Send Money.
    The scope of what a Sub User is allowed to do is controlled via the User Management panel in our web application.

    In further text the term "user" will be used to described the currently authenticated Sub User.

    Please read more about authentication process in the [authentication endpoint](#tag/Authentication) description.

    # Error Responses

    CurrencyFair follows the error response format proposed in [RFC 7807](https://tools.ietf.org/html/rfc7807) also known as Problem Details for HTTP APIs.

    ## Basic error message

    The base schema for all error responses is as follows:
    <SchemaDefinition schemaRef="#/components/schemas/ApiNotFoundError" exampleRef="#/components/examples/NotFound" />

    ## Error message with validation messages

    Endpoints which receive a payload will perform validation of the input data, and return a `HTTP 422` error response
    with `validation_messages` property.

    The structure of the `validation_messages` is as follows:
    ```json
    {
      "<input_property_name>": {
        "<error_type>": "<error_message>",
        ...
      },
      ...
    }
    ```

    For example if an endpoints requires an `iban` field, which should be a valid IBAN number, and the provided value
    is not correct, the API will return an error like in the example below:

    <SchemaDefinition schemaRef="#/components/schemas/ApiErrorWithValidationMessages" exampleRef="#/components/examples/ValidationMessages" />

    ## Error message with failure messages

    If the endpoint was unable to perform the requested operation, it may return a HTTP 4xx error response with `failure_messages` property.

    The structure of the `failure_messages` is as follows:
    ```json
    {
      "<error_code>": "<error_message>",
      ...
    }
    ```

    <SchemaDefinition schemaRef="#/components/schemas/ApiErrorWithFailureMessages" exampleRef="#/components/examples/FailureMessages" />

    ## MFA Required error message

    This error is returned if an endpoint requires MFA to be performed prior to running it. Please see the [MFA section](#section/Multi-Factor-authentication) for more details.

    <SchemaDefinition schemaRef="#/components/schemas/ApiErrorWithMfaDetails" exampleRef="#/components/examples/MfaRequired" />

    ## Rate limited error message
    To ensure the CurrencyFair API remains stable to all users, CurrencyFair may throttle a client's requests if it deems
    the number of requests is excessive.

    If this occurs, the API will return a `429 Too Many Requests` response. Upon receiving a 429 response the client
    should resubmit failed requests using the the [backoff](https://en.wikipedia.org/wiki/Exponential_backoff) approach,
    where your code performs a series of retries with increasing delays between each retry.

    <SchemaDefinition schemaRef="#/components/schemas/ApiTooManyRequestsError" />

    # HAL links

    Our API uses [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) links.
    These added properties are not covered in this documentation as they are auto-generated.

    # Multi Factor Authentication

    In order to call Multi Factor Authentication (MFA) secured endpoints in our API, the client must have:
    - a secret MFA token
    - an MFA device ID

    This information is provided as part of the API partner on-boarding process.

    The MFA (aka 2FA) process in our API is as follows:
    - Client makes normal POST call to a MFA protected endpoint (it sends all the data like there is no MFA on the endpoint)
    - The API returns HTTP 401 with MFA details that include:
      - X-CF-MFA-FOLLOWON-ID: <integer>
    - Client uses its secret token for MFA authorization and performs calculation of the "MFA code"
    - Client repeats **exactly the same POST call**, but with these headers added:
      - X-CF-MFA-FOLLOWON-ID: <integer>
      - X-CF-MFA-DEVICE-ID: <mfa_device_identifier>
      - X-CF-MFA-CODE: <the_calculated_MFA_code>

    This time the call will pass through the MFA layer and the endpoints will respond normally.

    The MFA is valid for 15 minutes, so if you call the same endpoint again it may not ask for MFA verification.

    # Forms

    Several of our endpoints are powered by a simple form fields system, where the POST endpoints receives a "form"
    that is defined by its "fields" endpoints.

    Example:

    `GET /users/{userId}/namedDepositors/fields` - returns a list of these "fields":
      - `nameMessage` - type: message
      - `name` - required, type: text
      - `description` - required, type: text

    and the `POST /users/{userId}/namedDepositors` - sets up a named depositor, expects these fields:
      - `name`
      - `description`

    This way of serving form fields is a UI-focused approach. It allows us to easily
    update forms in our applications according to business rules. The forms in our applications are rendered
    automatically based on the fields definitions.

    For server-side API clients access, using a "fields" endpoint may not always be necessary. For example the
    Named Depositor fields are not likely to change and they don't depend on the user or any other parameters.

    However certain endpoints like `/countryAccountConfigs/{countryId}` return a list of fields which differ
    based on the selected `countryId`.

    The field definition object supports many more field types than those currently required for Named Depositors or setting
    up a User Account. It is used by our applications to render UI in other parts of the application, not covered by
    this API. However, it is likely that new features added to this API will use forms.

    The full documentation for forms is available here: https://github.com/CurrencyFair/xsapi/blob/master/docs/Forms.md

    ## Field definition
    <SchemaDefinition schemaRef="#/components/schemas/Field" />
security:
  - api_key: []
x-amazon-apigateway-api-key-source: HEADER
x-amazon-apigateway-request-validators:
  params-only:
    validateRequestBody: false
    validateRequestParameters: true # Specifies whether to validate the required request parameters
x-tagGroups:
  - name: Authenticate
    tags:
      - Authentication
  - name: How CurrencyFair works, money-wise
    tags:
      - Introduction to money operations
  - name: Sending money in
    tags:
      - Depositing
      - Named Depositors
  - name: Exchanging money
    tags:
      - Quote and Exchange Money
      - Marketplace
  - name: Sending money out
    tags:
      - Recipient Bank Accounts
      - Transfer Out
      - Transfer Approvals
      - Send Money
  - name: Informational endpoints
    tags:
      - Countries & Currencies
      - User Information
tags:
  - name: Authentication
  - name: Countries & Currencies
    description: |
      These endpoints provide information related to countries and currencies, and what level of support CurrencyFair
      provides for each. For example, you can query these endpoints to determine a default currency for a country, or to see
      if CurrencyFair allows registration for a particular country.
  - name: User Information
    description: |
      These endpoints provide generic, user-specific information.
  - name: Introduction to money operations
    description: |
      ![](https://currencyfair.com/cf-content/uploads/2020/12/currencyfair-infographic.png)

      There are 3 basic operations in our system:
        - `Deposit` - In our UI, this is called "Top Up", "Transfer In" or "Request payment" which are all variants of depositing in money into your CurrencyFair wallet.
        - `Exchange` - Once money has been deposited, exchanging money in a user's currency wallet into another currency wallet.
        - `Transfer Out` - Once you have exchanged on the CurrencyFair platform, transferring money from CurrencyFair wallet into an external bank account.

      A combination of these 3 operations (Deposit -> Exchange -> Transfer Out) is known technically as an `Automatic Quick Trade` or `AQT`. The customer facing description (shown in UI) is called a "Send Money" operation.

      There are 2 ways the `exchange` operation can be made:
        - `Quick Trade` - this is an instant exchange with the rate CurrencyFair offers at a given moment.
        - `Marketplace Trade` - this is placing a trade "order", that gets "matched" when another customer places an order in an opposite currency pair
          for a similar value. It may take longer to happen, but a user can specify the desired exchange rate manually,
          and then wait for it to be matched.
  - name: Depositing
    description: |
      Depositing funds into a CurrencyFair account requires [creating a deposit](#operation/createUsersDeposit). There are
      multiple methods for creating a Deposit:

      1. Using a [Named Depositor](#tag/Named-Depositors). This is the preferred method.
      2. Using an [existing User Bank Account](#tag/Recipient-Bank-Accounts).
      3. By passing only a `currency` and `amount`, in which case a [Recipient Bank Account](#tag/Recipient-Bank-Accounts) will be created automatically.

      Before creating a deposit you can determine the available payment methods for the deposit currency using the
      [getPaymentMethodsWithTransferTimes](#operation/getPaymentMethodsWithTransferTimes) endpoint.

      In order to ensure seamless deposits, CurrencyFair requires that users include a reference in the
      reference field of the bank transfer. This reference usually consists of a user's CurrencyFair ID (CFID).
      To determine the exact reference required for a bank account refer to the the `reference` field
      returned from the [getCurrencyfairAccount](#operation/getCurrencyfairAccount) request.

      There is no fee to deposit funds into CurrencyFair.
  - name: Named Depositors
    description: |
      A Named Depositor is a person or business transferring funds into your CurrencyFair wallet. The closer a
      Named Depositor name matches the actual bank account name, the greater chance of a quick and seamless deposit.
      If you are unsure, please use the person’s full name or the full company name.
  - name: Quote and Exchange Money
    description: |
      Quote and Exchange Money endpoints are used to retrieve quotes and bank rate comparisons, as well as execute
      `Quick Trade` orders.

      A `Quick Trade` refers to an instant currency exchange order. This differs to a [Marketplace](#tag/Marketplace)
      order, where the rate is configurable and the execution time of the order depends on how quickly your rate can be
      matched.
  - name: Marketplace
    description: |
      The CurrencyFair Marketplace is where users can buy and sell currencies at a rate of their choosing. User's orders
      are matched with orders from other users.

      Marketplace trades are only executed between trading hours. Information about a market's status and trading
      hours can be found in the responses of the [getMarketplace](#operation/getMarketplace)
      and [getMarketplaces](#operation/getMarketplaces) requests.
  - name: Recipient Bank Accounts
    description: |
      Recipient Bank Accounts are user created Bank Accounts which you can transfer money to.

      Before creating a Recipient Bank Account you can fetch the required account information using the
      [getCountryAccountConfig](#operation/getCountryAccountConfig) endpoint. The account information can
      be validated using the [bankAccountLookup](#operation/bankAccountLookup) endpoint.

      The [requireBeneficiaryVerification](#operation/requireBeneficiaryVerification) endpoint can be used to
      determine if creating an account requires additional verification data.
  - name: Transfer Out
    description: |
      Transfer Out is the process of sending money from a customer's CurrencyFair wallet to a [Recipient](#tag/Recipient-Bank-Accounts).
  - name: Send Money
    description: |
      Send money, or `Automatic Quick Trade`, refers to the combined action of depositing, exchanging and transferring funds to a
      beneficiary. Further information on how Send Money operates can be found
      [here](https://support.currencyfair.com/s/article/Can-my-money-be-automatically-exchanged-and-transferred-to-my-chosen-beneficiary-after-I-send-it-in).
paths:
  "/oauth":
    post:
      summary: Authenticate
      description: |
        Successful authentication will produce an `OauthResponse` object which contains a token.
        The token must be then put into each next API call, into `Authorization` header, in the following way:
        ```
        Bearer {token}
        ```
        Example:
        ```
        Authorization: Bearer 3d22ddea15b15e65909463ed821dc6c5
        ```
      tags:
        - Authentication
      operationId: oauth
      security:
        - api_key: []
      parameters:
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/ContentTypeHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
      requestBody:
        description: The form values for authentication.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                grant_type:
                  description: Type of authentication. Use `authorization_code`.
                  type: string
                  default: authorization_code
                code:
                  description: The long-lived secret token
                  type: string
                client_id:
                  description: Type of client. Use `xsapi`.
                  type: string
                  default: xsapi
              required:
                - grant_type
                - code
                - client_id
            examples:
              xsapi:
                $ref: "#/components/examples/OauthRequest"
      responses:
        '200':
          description: Oauth response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OauthResponse"
              examples:
                success:
                  summary: Successful authorization
                  value:
                    $ref: "resources/examples/oauth/oAuthResponse.json"
        '400':
          $ref: "#/components/responses/Unauthorized"
        '401':
          $ref: "#/components/responses/UnauthorizedMfaRequired"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "POST"
        uri: "https://${stageVariables.url}/oauth"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Content-Type: "method.request.header.Content-Type"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
        responses:
          200:
            statusCode: 200
          400:
            statusCode: 400
          401:
            statusCode: 401
          429:
            statusCode: 429
  "/whoami":
    get:
      summary: Who Am I
      description: Retrieves basic information about the logged in user.
      operationId: getWhoAmI
      security:
        - api_key: []
          Bearer: []  # Note there is no dash, this indicates AND
      # Authorization Parameter is required for method request mapping to integration request.
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
      tags:
        - User Information
      responses:
        '200':
          description: Whoami entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WhoamiResponse"
              examples:
                entity:
                  description: Whoami Entity
                  value:
                    $ref: "resources/examples/whoami/whoamiEntity.json"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/whoami"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/countries":
    get:
      summary: Retrieve a list of Countries
      description: |
        Retrieves the full list of countries that CurrencyFair supports. Support
        for a country does not imply registration capabilities, or deposit/transfer
        capabilities.
      operationId: getCountries
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/CurrencyCodeOptionalQueryParam"
        - name: account
          in: query
          description: Use value `1` to get the list of Countries filtered by those which allow the setting up of a Bank Account.
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
      tags:
        - Countries & Currencies
      responses:
        '200':
          description: Countries collection
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CountriesCollection"
              examples:
                collection:
                  summary: Countries collection
                  value:
                    $ref: "resources/examples/countries/countriesCollection.json"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-request-validator: params-only
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/countries"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.querystring.account: "method.request.querystring.account"
          integration.request.querystring.currencyCode: "method.request.querystring.currencyCode"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/countries/{id}":
    get:
      summary: Retrieve a Country
      description: Retrieves a Country.
      operationId: getCountry
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - name: id
          in: path
          description: Country ID
          required: true
          schema:
            $ref: "#/components/schemas/IdParam"
      tags:
        - Countries & Currencies
      responses:
        '200':
          description: Country object
          headers:
            Vary:
              schema:
                type: string
            Cache-Control:
              schema:
                type: string
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CountriesEntity"
              examples:
                entity:
                  summary: Country entity
                  value:
                    $ref: "resources/examples/countries/countriesEntity.json"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/countries/{id}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Vary: "integration.response.header.Vary"
              method.response.header.Cache-Control: "integration.response.header.Cache-Control"
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/currencies":
    get:
      summary: Retrieve a list of Currencies
      description: Retrieves a collection of Currencies.
      operationId: getCurrencies
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - name: include_disabled
          in: query
          description: Use value `1` to retrieve a list of all currencies, including those which are disabled.
          required: false
          schema:
            type: integer
        - name: cf_client_account
          in: query
          description: Use value `1` to retrieve a list of currencies for which a CurrencyFair Bank Account
            exists and that we accept deposits in.
          required: false
          schema:
            type: integer
        - name: account
          in: query
          description: Use value `1` to retrieve a list of currencies that can be used with a user Bank Account.
          required: false
          schema:
            type: integer
        - name: regional_entity
          in: query
          description: Use value `1` to retrieve a list of currencies for the supplied regional entity.
          required: false
          schema:
            type: string
            example: Singapore
      tags:
        - Countries & Currencies
      responses:
        '200':
          description: Collection of Currencies
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CurrenciesCollection"
              examples:
                entity:
                  summary: Currencies collection
                  value:
                    $ref: "resources/examples/currencies/currenciesCollection.json"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-request-validator: params-only
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/currencies"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.querystring.include_disabled: "method.request.querystring.include_disabled"
          integration.request.querystring.cf_client_account: "method.request.querystring.cf_client_account"
          integration.request.querystring.account: "method.request.querystring.account"
          integration.request.querystring.regional_entity: "method.request.querystring.regional_entity"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/currencies/{currencyCode}":
    get:
      summary: Retrieve a Currency
      description: Retrieves a Currency.
      operationId: getCurrencyByCurrencyCode
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/CurrencyCodeParam"
      tags:
        - Countries & Currencies
      responses:
        '200':
          description: Currency object
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CurrenciesEntity"
              examples:
                entity:
                  summary: Currency entity
                  value:
                    $ref: "resources/examples/currencies/currenciesEntity.json"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/currencies/{currencyCode}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.currencyCode: "method.request.path.currencyCode"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/comparisonQuotes":
    post:
      summary: Retrieve a Comparison Quote
      operationId: returnComparisonQuote
      description: |
        Retrieves a comparison of rates between CurrencyFair and a traditional bank for a `BUY` or `SELL` transfer between two provided
        currencies.

        An example usage of this endpoint would be displaying a table comparing CurrencyFair's rates with a traditional bank's rates.
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
      tags:
        - Quote and Exchange Money
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComparisonQuotesBodyPayload"
        description: If no parameters are provided the call will return a `SELL` quote
          for €10,000 from `EUR` to `GBP`
      responses:
        '201':
          description: ComparisonQuotes object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComparisonQuotesEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "POST"
        uri: "https://${stageVariables.url}/comparisonQuotes"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
        responses:
          201:
            statusCode: 201
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/users/{userId}":
    get:
      summary: Retrieve a User
      description: Retrieves a User associated with a provided User ID.
      operationId: getUser
      security:
        - api_key: []
          Bearer: []
      tags:
        - User Information
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        '200':
          description: User object
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/UsersEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/users/{userId}/summaries":
    get:
      summary: Retrieve a list of Summaries
      description: |
        Retrieves a collection of Summaries for a user. Each summary is associated with a currency and contains
        information such available funds, pending deposits and open orders.
      operationId: getUsersSummaries
      security:
        - api_key: []
          Bearer: []
      tags:
        - User Information
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        '200':
          description: Summaries collection
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/SummariesCollection"
              examples:
                collection:
                  summary: Collection of Summary entities
                  value:
                    - $ref: "resources/examples/summaries/summariesCollection.json"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/summaries"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/users/{userId}/summaries/{currencyCode}":
    get:
      summary: Retrieve a Summary
      description: |
        Retrieves a Summary of a information related to a provided Currency for a User. A summary contains information such available funds,
        pending deposits and open orders for a currency.
      operationId: getUsersSummary
      security:
        - api_key: []
          Bearer: []
      tags:
        - User Information
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/CurrencyCodeParam"
      responses:
        '200':
          description: Summary entity
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/SummariesEntity"
              examples:
                entity:
                  description: Summaries entity
                  value:
                    - $ref: "resources/examples/summaries/summariesEntity.json"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/summaries/{currencyCode}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.currencyCode: "method.request.path.currencyCode"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/quicktradeQuotes":
    post:
      summary: Return QuickTrade Quote
      description: Returns a `BUY` or `SELL` quote for a transfer between two provided currencies
      operationId: createQuickTradeQuote
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
      tags:
        - Quote and Exchange Money
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuickTradeQuotesBodyPayload"
        required: true
      responses:
        '201':
          description: QuickTradeQuotes object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuickTradeQuotesEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "POST"
        uri: "https://${stageVariables.url}/quicktradeQuotes"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
        responses:
          201:
            statusCode: 201
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/quicktradeOrders":
    post:
      summary: Create a QuickTrade Order
      description: |
        Create a `BUY` or `SELL` Quick Trade order for a provided amount of money and currency pair.

        The request payload can be built using the response from [`POST` /quicktradeQuote](#operation/createQuickTradeQuote).

        Please note that rates may fluctuate between receiving a quote and placing an order.
      operationId: createQuickTradeOrder
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
      tags:
        - Quote and Exchange Money
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuickTradeOrdersBodyPayload"
        required: true
      responses:
        '201':
          description: QuickTradeOrders object
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/QuickTradeOrdersEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "POST"
        uri: "https://${stageVariables.url}/quicktradeOrders"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
        responses:
          201:
            statusCode: 201
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/users/{userId}/orders":
    get:
      summary: Retrieve a list of User Orders
      description: Retrieve a collection of Orders for a user.
      operationId: getUsersOrders
      security:
        - api_key: []
          Bearer: []
      tags:
        - Marketplace
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - $ref: "#/components/parameters/OrderDirParam"
        - name: search
          in: query
          description: An Order ID to search for. If provided, the `page` parameter will
            be ignored, and the page on which the searched order exists will be returned.
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: |
            The status ID by which to filter results. Both single and multiple (comma separated) values are accepted.
            * `Order Unmatched: 7`
            * `Order Partially Matched: 8`
            * `Order Fully Matched: 9`
            * `Order Cancelled: 3`
          required: false
          schema:
            type: integer
            enum:
              - 3
              - 7
              - 8
              - 9
        - name: order_by
          in: query
          description: The column on which to order results.
          required: false
          schema:
            type: string
            default: date
            enum:
              - 'date'
              - 'type'
              - 'rate'
              - 'stats'
              - 'amountplaced'
              - 'amountto'
              - 'amountfrom'
              - 'progress'
      responses:
        '200':
          description: A collection of Orders
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/OrdersCollection"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '409':
          $ref: "#/components/responses/RequestConflictWithCurrentState"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-request-validator: params-only
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/orders"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.order_dir: "method.request.querystring.order_dir"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          409:
            statusCode: 409
          429:
            statusCode: 429
  "/users/{userId}/orders/{orderId}":
    get:
      summary: Retrieve an Order
      description: Retrieves an Order for a user.
      operationId: getUsersOrder
      security:
        - api_key: []
          Bearer: []
      tags:
        - Marketplace
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/OrderIdParam"
      responses:
        '200':
          description: Order object
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/OrdersEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/orders/{orderId}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.orderId: "method.request.path.orderId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
    patch:
      summary: Update an open Order rate
      description: Updates an open Order rate for a user.
      operationId: patchUsersOrder
      security:
        - api_key: []
          Bearer: []
      tags:
        - Marketplace
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/OrderIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersOrderPatchBodyPayload"
        required: true
      responses:
        '200':
          description: Updated Order.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/OrdersEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "PATCH"
        uri: "https://${stageVariables.url}/users/{userId}/orders/{orderId}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.orderId: "method.request.path.orderId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          422:
            statusCode: 422
          429:
            statusCode: 429
    delete:
      summary: Cancel an Open Order
      description: Cancels an Open Order for a user.
      operationId: deleteUsersOrder
      security:
        - api_key: []
          Bearer: []
      tags:
        - Marketplace
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/OrderIdParam"
        - name: amount
          in: query
          description: Verification of amount that should be cancelled.
          required: true
          schema:
            type: number
            format: float
            example: "500.00"
      responses:
        '204':
          description: Order successfully cancelled.
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "DELETE"
        uri: "https://${stageVariables.url}/users/{userId}/orders/{orderId}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.orderId: "method.request.path.orderId"
          integration.request.querystring.amount: "method.request.querystring.amount"
        responses:
          204:
            statusCode: 204
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/users/{userId}/orders/{orderId}/history":
    get:
      summary: Retrieve Order History
      description: Retrieves an Order's History for a user.
      operationId: getUsersOrderHistory
      security:
        - api_key: []
          Bearer: []
      tags:
        - Marketplace
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/OrderIdParam"
      responses:
        '200':
          description: Order history object
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/OrdersHistoryEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/orders/{orderId}/history"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.orderId: "method.request.path.orderId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/marketplaces":
    get:
      summary: Retrieve Currency Marketplace Information
      description: |
        Returns currency exchange rates for all exchange markets.
      operationId: getMarketplaces
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
      tags:
        - Marketplace
      responses:
        '200':
          description: Marketplaces collection
          content:
            application/hal+json:
              examples:
                example:
                  value:
                    summary: Example Marketplace collection response
                    $ref: 'resources/examples/marketPlaces/marketPlacesCollection.json'
              schema:
                $ref: "#/components/schemas/MarketplacesCollection"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/marketplaces"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/marketplaces/{currencyFrom}/{currencyTo}":
    get:
      summary: Retrieve Marketplace information for a currency pair
      description: Retrieves marketplace information for a provided currency pair.
      operationId: getMarketplace
      security:
        - api_key: []
          Bearer: []
      tags:
        - Marketplace
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - name: currencyFrom
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CurrencyFrom'
        - name: currencyTo
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CurrencyTo'
      responses:
        '200':
          description: Marketplaces collection
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/MarketplacesEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/marketplaces/{currencyFrom}/{currencyTo}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.currencyFrom: "method.request.path.currencyFrom"
          integration.request.path.currencyTo: "method.request.path.currencyTo"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/marketplaceOrders":
    post:
      summary: Create Marketplace Order
      description: Creates new marketplace order for provided amount of money, currency
        pair, trade-type and rate.
      operationId: createMarketplaceOrder
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
      tags:
        - Marketplace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MarketplaceOrdersBodyPayload"
        required: true
      responses:
        '201':
          description: OrdersEntity
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/OrdersEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "POST"
        uri: "https://${stageVariables.url}/marketplaceOrders"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
        responses:
          201:
            statusCode: 201
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/users/{userId}/deposits":
    post:
      summary: Create a Deposit
      description: Creates a Deposit for a user.
      operationId: createUsersDeposit
      security:
        - api_key: []
          Bearer: []
      tags:
        - Depositing
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
      requestBody:
        content:
          application/json:
            examples:
              named-depositor:
                summary: Create a Deposit with a Named Depositor.
                value:
                  "$ref": "resources/examples/deposits/depositWithNamedDepositorPayload.json"
              account:
                summary: Create a Deposit with an Account.
                value:
                  "$ref": "resources/examples/deposits/depositWithAccountPayload.json"
            schema:
              $ref: "#/components/schemas/DepositsCreateBodyPayload"
        required: true
      responses:
        '201':
          description: The Deposit Entity.
          content:
            application/hal+json:
              examples:
                typical:
                  description: A typical Deposit Entity response.
                  value:
                    "$ref": "resources/examples/deposits/depositEntityResponse.json"
              schema:
                $ref: "#/components/schemas/DepositsEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "POST"
        uri: "https://${stageVariables.url}/users/{userId}/deposits"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
        responses:
          201:
            statusCode: 201
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          422:
            statusCode: 422
          429:
            statusCode: 429
    get:
      summary: Retrieve a list of Deposits
      description: Retrieves a collection of Deposits for a user.
      operationId: getUsersDeposits
      security:
        - api_key: []
          Bearer: []
      tags:
        - Depositing
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        '200':
          description: The collection of Deposits.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/DepositsCollection"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/ProfileNotActivated"
        '409':
          $ref: "#/components/responses/RequestConflictWithCurrentState"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-request-validator: params-only
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/deposits"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          409:
            statusCode: 409
          429:
            statusCode: 429
  "/users/{userId}/deposits/{id}":
    patch:
      summary: Update a Deposit's values
      description: Partially update a Deposit for a user.
      operationId: patchUsersDeposit
      security:
        - api_key: []
          Bearer: []
      tags:
        - Depositing
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - name: id
          in: path
          description: The ID of the Deposit.
          required: true
          schema:
            type: string
            example: 123
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DepositsPatchBodyPayload"
        required: true
      responses:
        '200':
          description: The Deposit entity.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/DepositsEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "PATCH"
        uri: "https://${stageVariables.url}/users/{userId}/deposits/{id}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          422:
            statusCode: 422
          429:
            statusCode: 429
    get:
      summary: Retrieve a Deposit
      description: Retrieves a Deposit for a user.
      operationId: getUsersDeposit
      security:
        - api_key: []
          Bearer: []
      tags:
        - Depositing
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - name: id
          in: path
          description: The ID of the Deposit.
          required: true
          schema:
            type: string
            example: 123
      responses:
        '200':
          description: The Deposit entity.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/DepositsEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/ProfileNotActivated"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/deposits/{id}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/currencyfair/accounts":
    get:
      summary: Retrieve a list of CurrencyFair Bank Accounts
      description: Retrieves a collection of CurrencyFair Bank Accounts.
      operationId: getCurrencyfairAccounts
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
      tags:
        - Depositing
      responses:
        '200':
          description: The list of all CurrencyFair bank accounts.
          content:
            application/hal+json:
              examples:
                typical:
                  summary: Typical CurrencyFair Bank Accounts response
                  value:
                    $ref: 'resources/examples/currencyFairBankAccounts/currencyFairBankAccountCollection.json'
              schema:
                $ref: "#/components/schemas/CurrencyfairAccountsCollection"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/currencyfair/accounts"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/currencyfair/accounts/{currencyCode}":
    get:
      summary: Retrieve a CurrencyFair Bank Account
      description: Retrieves a single CurrencyFair Bank Account by currency.
      operationId: getCurrencyfairAccount
      security:
        - api_key: []
          Bearer: []
      tags:
        - Depositing
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/CurrencyCodeParam"
      responses:
        '200':
          description: A CurrencyFair Bank Account
          content:
            application/hal+json:
              examples:
                typical:
                  summary: Typical CurrencyFair Bank Account response
                  value:
                    $ref: 'resources/examples/currencyFairBankAccounts/currencyFairBankAccountEntity.typical.json'
              schema:
                $ref: "#/components/schemas/CurrencyfairAccountsEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/currencyfair/accounts/{currencyCode}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.currencyCode: "method.request.path.currencyCode"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/users/{userId}/transfers":
    post:
      summary: Create a Transfer Out
      description: Creates a new Transfer Out of the money from a customer's wallet into
        a Bank Account.
      operationId: createTransfer
      security:
        - api_key: []
          Bearer: []
      tags:
        - Transfer Out
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferOutBodyPayload"
            examples:
              typical:
                summary: Typical Transfer Out
                description: This is a minimal object required to create a transfer.
                value:
                  $ref: resources/examples/transfers/transferOutBodyPayload.typical.json
              complicated:
                summary: Complicated Transfer Out
                description: This call is utilising all possible Transfer Out options.
                value:
                  $ref: resources/examples/transfers/transferOutBodyPayload.complicated.json
        description: A Transfer Out entity
        required: true
      responses:
        '201':
          description: The newly created Transfer Out object
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/TransfersEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "POST"
        uri: "https://${stageVariables.url}/users/{userId}/transfers"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
        responses:
          201:
            statusCode: 201
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          422:
            statusCode: 422
          429:
            statusCode: 429
    get:
      summary: Retrieve a list Transfer Outs
      description: Retrieves a collection of Transfer Out entities for a user, paginated to
        25 results per page. Transfers are sorted by the time of creation and returned
        in descending order.
      operationId: getTransfers
      security:
        - api_key: []
          Bearer: []
      tags:
        - Transfer Out
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/PageParam"
        - in: query
          name: status
          required: false
          schema:
            $ref: "#/components/schemas/TransferStatusEnum"
      responses:
        '200':
          description: Transfer Out Collection.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/TransfersCollection"
              example:
                value:
                  $ref: resources/examples/transfers/transfersCollection.json
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-request-validator: params-only
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/transfers"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.status: "method.request.querystring.status"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/users/{userId}/transfers/{transferId}":
    get:
      summary: Retrieve a Transfer Out
      description: Retrieves a single Transfer Out for a user
      operationId: getTransfer
      security:
        - api_key: []
          Bearer: []
      tags:
        - Transfer Out
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/TransferOutIdParam"
      responses:
        '200':
          description: Transfer object
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/TransfersEntity"
              examples:
                typical:
                  summary: Confirmed Transfer Out
                  description: This is how a typical Transfer Out looks like for a
                    customer.
                  value:
                    $ref: resources/examples/transfers/transferEntity.confirmed.json
                pending:
                  summary: Pending Transfer Out
                  description: The following Transfer Out is created by a SubUser
                    and must be confirmed by another user with sufficient privileges
                    to do so. This feature is available for business customers using
                    the Multi User functionality.
                  value:
                    $ref: resources/examples/transfers/transferEntity.pending.json
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/transfers/{transferId}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.transferId: "method.request.path.transferId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
    patch:
      summary: Update an existing Transfer
      description: Partially update the Transfer Out for a user. Allows updating the
        `statusInfo.status` property, to approve a pending transfer. Only allowed
        if the logged in customer has the capability to approve transfers.
      operationId: patchTransfer
      security:
        - api_key: []
          Bearer: []
      tags:
        - Transfer Out
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/TransferOutIdParam"
      requestBody:
        description: A partial Transfer Out entity.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchTransferBodyPayload"
            examples:
              typical:
                summary: Confirmed Transfer Out
                description: The Transfer Out created by a SubUser and confirmed by
                  another user with capability to do so
                value:
                  $ref: resources/examples/transfers/transferEntity.updated.json
              pending:
                summary: Cancelled Transfer Out
                description: The Transfer Out created by a SubUser and cancelled by
                  another user with capability to do so
                value:
                  $ref: resources/examples/transfers/transferEntity.cancelled.json
      responses:
        '200':
          description: The updated transfer object
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/TransfersEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "PATCH"
        uri: "https://${stageVariables.url}/users/{userId}/transfers/{transferId}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.transferId: "method.request.path.transferId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/transferTypes":
    get:
      summary: Retrieve a list of Transfer Types
      description: Retrieves a collection of Transfer Types.
      operationId: getTransferTypes
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
      tags:
        - Transfer Out
      responses:
        '200':
          description: Transfer Types collection
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/TransferTypesCollection"
              examples:
                collection:
                  summary: Transfer Types collection
                  value:
                    - $ref: "resources/examples/transferTypes/transferTypesCollection.json"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/transferTypes"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/transferPurposes":
    get:
      summary: Retrieve a list of Transfer Purposes
      description: Retrieves a collection of Transfer Purposes.
      operationId: getTransferPurposes
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/CurrencyCodeOptionalQueryParam"
      tags:
        - Transfer Out
      responses:
        '200':
          description: Collection of Transfers
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/TransferPurposesCollection"
              examples:
                collection:
                  summary: Transfer Purposes collection
                  value:
                    - $ref: "resources/examples/transferPurposes/transferPurposesCollection.json"
                filtered:
                  summary: Transfer Purposes collection for specific currency
                  value:
                    - $ref: "resources/examples/transferPurposes/transferPurposesForCurrencyCollection.json"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/transferPurposes"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.querystring.currencyCode: "method.request.querystring.currencyCode"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/transferFees":
    get:
      summary: Retrieve a list of Transfer Fees
      description: Retrieves a collection of Transfer Fees.
      operationId: getTransferFees
      security:
        - api_key: []
          Bearer: []
      tags:
        - Transfer Out
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - name: excludeFreeTransfer
          in: query
          description: Use value `1` to ignore Free Transfers.
          required: false
          schema:
            type: integer
            enum: [ 0, 1 ]
            default: 0
      responses:
        '200':
          description: Transfer Fees collection.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/TransferFeesCollection"
              examples:
                collection:
                  summary: Transfer Fees collection
                  value:
                    - $ref: "resources/examples/transferFees/transferFeesCollection.json"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-request-validator: params-only
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/transferFees"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.querystring.excludeFreeTransfer: "method.request.querystring.excludeFreeTransfer"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/users/{userId}/rewards/transfers/detail":
    get:
      summary: Retrieve a list of Free Transfer Reward details for a user
      description: |
        Retrieves a collection of Free Transfer Reward details for a user.

        These are the full details of the individual Free Transfer Rewards for both priority and standard transfers, both available and already used or expired.
      operationId: getUsersRewardsTransfersDetails
      security:
        - api_key: []
          Bearer: []
      tags:
        - Transfer Out
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        '200':
          description: A Collection of Free Transfer Reward details for a user.
          content:
            application/hal+json:
              schema:
                "$ref": "#/components/schemas/UsersFreeTransfersCollection"
              examples:
                collection:
                  description: Free Transfer Rewards collection
                  value:
                    - "$ref": resources/examples/rewards/transfers/details/collection.json
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/rewards/transfers/detail"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/users/{userId}/accounts/{accountId}":
    get:
      summary: Retrieve a Recipient Bank Account
      description: Retrieve a Recipient Bank Account for a user.
      operationId: getUsersAccount
      security:
        - api_key: []
          Bearer: []
      tags:
        - Recipient Bank Accounts
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/AccountIdParam"
      responses:
        '200':
          description: Single user's Bank Account
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/UsersAccountsEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/ProfileNotActivated"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/accounts/{accountId}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.accountId: "method.request.path.accountId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          422:
            statusCode: 422
          429:
            statusCode: 429
    delete:
      summary: Delete a Recipient Bank Account
      description: Delete a Recipient Bank Account for a user.
      operationId: deleteUsersAccount
      security:
        - api_key: []
          Bearer: []
      tags:
        - Recipient Bank Accounts
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/AccountIdParam"
      responses:
        '204':
          description: Account deleted
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/ProfileNotActivated"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "DELETE"
        uri: "https://${stageVariables.url}/users/{userId}/accounts/{accountId}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.accountId: "method.request.path.accountId"
        responses:
          204:
            statusCode: 204
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          422:
            statusCode: 422
          429:
            statusCode: 429
    patch:
      summary: Update a Recipient Bank Account's values
      description: |
        Partially update a Recipient Bank Account for a user.

        Updating a Recipient Bank Account will generate a new `accountId` for the entity.
      operationId: patchAccount
      security:
        - api_key: []
          Bearer: []
      tags:
        - Recipient Bank Accounts
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/AccountIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersAccountPatchBodyPayload"
        required: true
      responses:
        '200':
          description: Account
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/UsersAccountsEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "PATCH"
        uri: "https://${stageVariables.url}/users/{userId}/accounts/{accountId}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.accountId: "method.request.path.accountId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/users/{userId}/accounts/{accountId}/validate":
    get:
      summary: Validate the Recipient Bank Account can be used for transfer or deposit
      description: |
        Validates that a Recipient Bank Account's information is valid for the creation of a transfer or deposit.
      operationId: validateAccount
      security:
        - api_key: []
          Bearer: []
      tags:
        - Recipient Bank Accounts
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/AccountIdParam"
      responses:
        '200':
          description: Account can be used.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountValidationResponse"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '422':
          description: Account cannot be used.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ApiUnprocessableEntityError"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/accounts/{accountId}/validate"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.accountId: "method.request.path.accountId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/users/{userId}/accounts":
    get:
      summary: Retrieve a list of Recipient Bank Accounts
      description: Retrieves a collection of Recipient Bank Accounts for user.
      operationId: getUsersAccounts
      security:
        - api_key: []
          Bearer: []
      tags:
        - Recipient Bank Accounts
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        '200':
          description: User's Accounts collection.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/UsersAccountsCollection"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/ProfileNotActivated"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/accounts"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
    post:
      summary: Create a Recipient Bank Account
      description: Creates a Recipient Bank Account for a user. You *must* call this endpoint twice
        - first to get MFA `followon id`, and again with the MFA code in the header.
        Both call's parameters *must* be identical. Please refer to the [MFA documentation](#section/Multi-Factor-Authentication).
      operationId: createUsersAccount
      security:
        - api_key: []
          Bearer: []
      tags:
        - Recipient Bank Accounts
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - name: x-cf-mfa-followon-id
          in: header
          description: The MFA followon ID.
          required: false
          schema:
            type: string
        - name: x-cf-mfa-device-id
          in: header
          description: The MFA device ID.
          required: false
          schema:
            type: string
        - name: x-cf-mfa-code
          in: header
          description: The MFA code.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              iban-swift:
                description: Creating an IBAN/Swift Bank Account.
                value:
                  $ref: 'resources/examples/userAccounts/userAccountIbanSwiftPayload.json'
              us-account:
                description: Creating a US Bank Account.
                value:
                  $ref: 'resources/examples/userAccounts/userAccountUsPayload.json'
            schema:
              $ref: "#/components/schemas/UsersAccountsBodyPayload"
        description: New account data
        required: true
      responses:
        '201':
          description: Users's Account entity.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/UsersAccountsEntity"
        '401':
          $ref: "#/components/responses/MfaRequired"
        '403':
          $ref: "#/components/responses/ProfileNotActivated"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "POST"
        uri: "https://${stageVariables.url}/users/{userId}/accounts"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.x-cf-mfa-followon-id: "method.request.path.x-cf-mfa-followon-id"
          integration.request.path.x-cf-mfa-device-id: "method.request.path.x-cf-mfa-device-id"
          integration.request.path.x-cf-mfa-code: "method.request.path.x-cf-mfa-code"
        responses:
          201:
            statusCode: 201
          401:
            statusCode: 401
          403:
            statusCode: 403
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/countryAccountConfigs/{countryId}":
    get:
      summary: Recipient Bank Account configuration per Country
      description: |
        Retrieves all the Bank Account field configuration for a given country and its allowed currencies.
        This field configuration should be used when determining which fields are needed to add a Bank Account.
        An optional currency querystring param can be used to filter results by (if not provided, results will show
             all allowed currencies for the CountryId).
      operationId: getCountryAccountConfig
      security:
        - api_key: []
          Bearer: []
      tags:
        - Recipient Bank Accounts
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/CountryIdParam"
        - $ref: "#/components/parameters/CurrencyQueryParam"
      responses:
        '200':
          description: A configuration indicating the required Bank Account fields per allowed currencies for the given Country.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CountryAccountConfigsEntity"
              example:
                value:
                  $ref: resources/examples/countryAccountConfigs/countryAccountConfigsEntity.json
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-request-validator: params-only
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/countryAccountConfigs/{countryId}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.countryId: "method.request.path.countryId"
          integration.request.querystring.currency: "method.request.querystring.currency"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/accountsBankLookup":
    post:
      summary: Retrieve Bank Details for provided Account details
      description: Retrieves Bank Details from provided Bank Account information and Country ID. Returns an error response for invalid bank details.
      operationId: bankAccountLookup
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/ContentTypeHeaderParam"
      tags:
        - Recipient Bank Accounts
      requestBody:
        content:
          application/json:
            examples:
              irish-account:
                summary: Irish IBAN Bank Account payload
                value:
                  "$ref": "resources/examples/bankAccountLookup/irishIbanPayload.json"
              usa-bank:
                summary: USA Account payload
                value:
                  "$ref": "resources/examples/bankAccountLookup/usaBankPayload.json"
              hk-account:
                summary: Honk Kong Account payload
                value:
                  "$ref": "resources/examples/bankAccountLookup/hkBankPayload.json"
            schema:
              $ref: "#/components/schemas/AccountsBankLookupBodyPayload"
        required: true
      responses:
        '200':
          description: The details of the Bank.
          content:
            application/json:
              examples:
                irish-account:
                  summary: Irish IBAN Bank Account response
                  value:
                    "$ref": "resources/examples/bankAccountLookup/irishIbanResponse.json"
                usa-bank:
                  summary: USA Account response
                  value:
                    "$ref": "resources/examples/bankAccountLookup/usaBankResponse.json"
                hk-account:
                  summary: Honk Kong Account response
                  value:
                    "$ref": "resources/examples/bankAccountLookup/hkBankResponse.json"
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountInformation"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '422':
          description: The error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorWithMessages"
              examples:
                invalid-iban:
                  summary: Invalid IBAN response
                  value:
                    $ref: "resources/examples/bankAccountLookup/invalidIban422Response.json"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "POST"
        uri: "https://${stageVariables.url}/accountsBankLookup"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Content-Type: "method.request.header.Content-Type"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
        responses:
          200:
            statusCode: 200
          400:
            statusCode: 400
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/requireBeneficiaryVerification":
    post:
      summary: Retrieve a Beneficiary verification status
      description: Determines if a Beneficiary is a [BullionVault](https://www.bullionvault.com/) account and requires verification.
      operationId: requireBeneficiaryVerification
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
      tags:
        - Recipient Bank Accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequireBeneficiaryVerificationBodyPayload"
        required: true
      responses:
        '200':
          description: The BullionVault Confirmation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RequireBeneficiaryVerificationEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "POST"
        uri: "https://${stageVariables.url}/requireBeneficiaryVerification"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/users/{userId}/automaticQuickTrades":
    post:
      summary: Create an Automatic Quick Trade
      description: Creates an Automatic Quick Trade for a user.
      operationId: createUsersAutomaticQuickTrade
      security:
        - api_key: []
          Bearer: []
      tags:
        - Send Money
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
      requestBody:
        content:
          application/json:
            examples:
              example-payload:
                description: An example Automatic Quick Trade payload.
                value:
                  "$ref": "resources/examples/aqt/createUserAqtPayload.json"
            schema:
              $ref: "#/components/schemas/AutomaticQuickTradesBodyPayload"
        required: true
      responses:
        '200':
          description: AutomaticQuickTradesEntity
          content:
            application/hal+json:
              examples:
                example-response:
                  description: An example Automatic Quick Trade response.
                  value:
                    "$ref": "resources/examples/aqt/createUserAqtResponse.json"
              schema:
                $ref: "#/components/schemas/AutomaticQuickTradesEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/ProfileNotActivated"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "POST"
        uri: "https://${stageVariables.url}/users/{userId}/automaticQuickTrades"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          422:
            statusCode: 422
          429:
            statusCode: 429
    get:
      summary: Retrieve a list of Automatic Quick Trades
      description: Retrieves a collection of Automatic Quick Trades for a user.
      operationId: getUsersAutomaticQuickTrades
      security:
        - api_key: []
          Bearer: []
      tags:
        - Send Money
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - name: status
          in: query
          description: |
            Optional statuses to filter by. Accepts single or multiple in CSV format

            `ACTIVE` - 0

            `COMPLETED` - 1

            `EXPIRED` - 2

            `CANCELLED` - 3

            `FAILED` - 4

            `SUSPENDED` - 5

            `SUSPENDED_AWAITING_DOCS` - 6

            `SUSPENDED_AML_VERIFICATION` - 7

            `PROCESSING` - 8

            `PENDING_MARKET_OPENING` - 9

            `SUSPENDED_AWAITING_BENE_INFO` - 10

            `PENDING_EXCHANGE_NOT_AVAILABLE` - 11
          required: false
          example: 1,2,4
          schema:
            type: string
      responses:
        '200':
          description: A collection of Automatic Quick Trades.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/AutomaticQuickTradesCollection"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
        '403':
          $ref: "#/components/responses/Forbidden"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-request-validator: params-only
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/automaticQuickTrades"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.querystring.status: "method.request.querystring.status"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/automaticQuickTradesStatuses":
    get:
      summary: Retrieve a list of Automatic Quick Trade Statuses
      description: Retrieves a collection of Automatic Quick Trade Statuses for a user.
      operationId: getAutomaticQuickTradesStatuses
      security:
        - api_key: []
          Bearer: []
      tags:
        - Send Money
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - name: filter
          in: query
          description: An optional filter. Currently accepts `open` which returns open
            / in progress Automatic Quick Trade Statuses.
          required: false
          schema:
            type: string
            enum:
              - open
      responses:
        '200':
          description: A collection of Automatic Quick Trade Statuses.
          content:
            application/hal+json:
              examples:
                typical:
                  description: Typical Automatic Quick Trade Statuses response.
                  value:
                    "$ref": "resources/examples/aqtStatuses/actStatusesCollection.json"
              schema:
                $ref: "#/components/schemas/AutomaticQuickTradesStatusesCollection"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-request-validator: params-only
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/automaticQuickTradesStatuses"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.querystring.filter: "method.request.querystring.filter"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/automaticQuickTradesStatuses/{statusId}":
    get:
      summary: Retrieve an Automatic Quick Trade Status
      description: Retrieves an Automatic Quick Trade Status for a user.
      operationId: getAutomaticQuickTradesStatus
      security:
        - api_key: []
          Bearer: []
      tags:
        - Send Money
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - name: statusId
          in: path
          description: The Automatic Quick Trade Status ID.
          required: true
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: The Automatic Quick Trade Status Entity.
          content:
            application/hal+json:
              examples:
                typical:
                  description: Typical Automatic Quick Trade Statuses entity response.
                  value:
                    "$ref": "resources/examples/aqtStatuses/actStatusEntity.json"
              schema:
                $ref: "#/components/schemas/AutomaticQuickTradesStatusesEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/automaticQuickTradesStatuses/{statusId}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.statusId: "method.request.path.statusId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/users/{userId}/automaticQuickTrades/{id}":
    get:
      summary: Retrieve an Automatic Quick Trade
      description: Retrieves an Automatic Quick Trade for a user.
      operationId: getUsersAutomaticQuickTrade
      security:
        - api_key: []
          Bearer: []
      tags:
        - Send Money
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - name: id
          in: path
          description: The ID of the Automatic Quick Trade.
          required: true
          schema:
            type: string
            example: 123
      responses:
        '200':
          description: an Automatic Quick Trade entity.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/AutomaticQuickTradesEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/automaticQuickTrades/{id}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/users/{userId}/transactionTimes/deposit/{currencyCode}":
    get:
      summary: Retrieve a Deposit Transaction Time
      description: Retrieves a Deposit Transaction Times entity for a given Currency Code.
      operationId: getDepositTransactionTimes
      security:
        - api_key: []
          Bearer: []
      tags:
        - Depositing
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/CurrencyCodeParam"
      responses:
        '200':
          description: transactionTimes entity
          content:
            application/hal+json:
              examples:
                typical:
                  description: Deposit Transaction Time typical response.
                  value:
                    "$ref": "resources/examples/transactionTimes/transactionTimeEntity.json"
              schema:
                $ref: "#/components/schemas/TransactionTimesEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/transactionTimes/deposit/{currencyCode}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.currencyCode: "method.request.path.currencyCode"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/users/{userId}/transactionTimes/transfer/{currencyCode}":
    get:
      summary: Retrieve a Transfer Transaction Time
      description: Retrieves a Transfer Transaction Time entity for a given Currency Code.
      operationId: getTransferTransactionTimes
      security:
        - api_key: []
          Bearer: []
      tags:
        - Creation process
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/CurrencyCodeParam"
      responses:
        '200':
          description: transactionTimes entity
          content:
            application/hal+json:
              examples:
                typical:
                  description: Deposit Transaction Time typical response.
                  value:
                    "$ref": "resources/examples/transactionTimes/transactionTimeEntity.json"
              schema:
                $ref: "#/components/schemas/TransactionTimesEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/transactionTimes/transfer/{currencyCode}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.currencyCode: "method.request.path.currencyCode"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/users/{userId}/transactionTimes/combined/{fromCurrencyCode}/{transferType}/{toCurrencyCode}":
    get:
      summary: Retrieve a Combined Transaction Time (Deposit + Transfer)
      description: Retrieves a Combined Transaction Time entity consisting of Deposit and Transfer transaction times.
      operationId: getCombinedTransactionTimes
      security:
        - api_key: []
          Bearer: []
      tags:
        - Send Money
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - name: fromCurrencyCode
          in: path
          description: The 3 character currency code ISO 4217 format.
          required: true
          schema:
            type: string
            example: EUR
        - name: transferType
          in: path
          description: The Transfer Type. Priority should only be used with the ILS currency.
          required: true
          schema:
            type: string
            enum:
              - STANDARD
              - PRIORITY
        - name: toCurrencyCode
          in: path
          description: The 3 character currency code ISO 4217 format.
          required: true
          schema:
            type: string
            example: GBP
      responses:
        '200':
          description: TransactionTimes entity.
          content:
            application/hal+json:
              examples:
                typical:
                  description: Combined Transaction Time typical response.
                  value:
                    "$ref": "resources/examples/transactionTimes/transactionTimeCombinedEntity.json"
              schema:
                $ref: "#/components/schemas/TransactionTimesEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/transactionTimes/combined/{fromCurrencyCode}/{transferType}/{toCurrencyCode}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.fromCurrencyCode: "method.request.path.fromCurrencyCode"
          integration.request.path.transferType: "method.request.path.transferType"
          integration.request.path.toCurrencyCode: "method.request.path.toCurrencyCode"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/onlineBanks":
    get:
      summary: Retrieve a list of Online Banks
      description: Retrieves a collection of Online Banks.
      operationId: getOnlineBanks
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
      tags:
        - Depositing
      responses:
        '200':
          description: A collection of Online Banks.
          content:
            application/hal+json:
              schema:
                "$ref": "#/components/schemas/OnlineBanksCollection"
              examples:
                collection:
                  description: Online Banks Collection
                  value:
                    - "$ref": resources/examples/onlineBanks/onlineBanksCollection.json
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/onlineBanks"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/onlineBanks/{id}":
    get:
      summary: Retrieve an Online Bank
      description: Retrieves an Online Bank.
      operationId: getOnlineBank
      security:
        - api_key: []
          Bearer: []
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - name: id
          in: path
          description: The Online Bank ID.
          required: true
          schema:
            type: integer
      tags:
        - Depositing
      responses:
        '200':
          description: An Online Bank entity.
          content:
            application/hal+json:
              schema:
                "$ref": "#/components/schemas/OnlineBanksEntity"
              examples:
                entity:
                  description: Online Banks entity
                  value:
                    - "$ref": resources/examples/onlineBanks/onlineBankEntity.json
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/onlineBanks/{id}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/countryActivationConfigs/{countryId}":
    get:
      summary: Retrieve an object containing the fields required for customer activation
        based on the country of registration
      operationId: getCountryActivationConfigs
      security:
        - api_key: []
          Bearer: []
      tags:
        - Recipient Bank Accounts
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - name: countryId
          in: path
          description: country ID.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Object containing `countryId` and array of fields.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CountryActivationConfigsObject"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/countryActivationConfigs/{countryId}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.countryId: "method.request.path.countryId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/users/{userId}/paymentMethods/{currencyCode}":
    get:
      summary: Retrieves a list of Payment Methods for a provided currency
      description: |
        Retrieves a collection of Payment Methods for a provided currency. Each payment method will include an
        estimated transaction time.
      operationId: getPaymentMethods
      security:
        - api_key: []
          Bearer: []
      tags:
        - Depositing
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/CurrencyCodeParam"
        - name: amount
          in: query
          description: The amount to be deposited.
          required: false
          example: 15000
          schema:
            type: integer
      responses:
        '200':
          description: The list of Payment Methods.
          content:
            application/hal+json:
              examples:
                typical:
                  description: Typical Payment Methods response.
                  value:
                    $ref: "resources/examples/paymentMethods/paymentMethodsCollectionForCurrency.json"
              schema:
                $ref: "#/components/schemas/PaymentMethodsEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-request-validator: params-only
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/paymentMethods/{currencyCode}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.currencyCode: "method.request.path.currencyCode"
          integration.request.querystring.amount: "method.request.querystring.amount"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/users/{userId}/paymentMethods/{currencyCode}/{transferCurrency}":
    get:
      summary: Retrieves a list of Payment Methods for a provided currency corridor
      description: Retrieves a collection of Payment Methods for a provided currency as well as transaction times relative to a second currency.
      operationId: getPaymentMethodsWithTransferTimes
      security:
        - api_key: []
          Bearer: []
      tags:
        - Depositing
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/CurrencyCodeParam"
        - name: transferCurrency
          in: path
          description: The 3 character currency code in ISO 4217 format.
          required: true
          schema:
            type: string
            example: EUR
            pattern: "[A-Z]{3}"
        - name: amount
          in: query
          description: The amount that will be deposited.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A collection of Payment Methods.
          content:
            application/hal+json:
              examples:
                typical:
                  description: Typical Payment Methods response.
                  value:
                    $ref: "resources/examples/paymentMethods/paymentMethodsCollection.json"
              schema:
                $ref: "#/components/schemas/PaymentMethodsEntity"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-request-validator: params-only
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/paymentMethods/{currencyCode}/{transferCurrency}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.currencyCode: "method.request.path.currencyCode"
          integration.request.path.transferCurrency: "method.request.path.transferCurrency"
          integration.request.querystring.amount: "method.request.querystring.amount"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/users/{userId}/transfers/{transferId}/approvers":
    get:
      summary: Retrieve a list of Transfer Approvers
      description: Retrieves collection of Transfer Approvers
      operationId: getTransferApprovers
      security:
        - api_key: []
          Bearer: []
      tags:
        - Transfer Approvals
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/TransferOutIdParam"
      responses:
        '200':
          description: Transfer Approvers collection.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/TransferApproverCollection"
              examples:
                collection:
                  summary: Transfer Approvers collection
                  value:
                    $ref: "resources/examples/transferApprovers/transferApproversCollection.json"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/transfers/{transferId}/approvers"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.transferId: "method.request.path.transferId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/users/{userId}/transfers/{transferId}/notify":
    post:
      summary: Send notifications to Transfer Approvers
      description: Sends notifications to Transfer Approvers.
      operationId: notifyTransferApprovers
      security:
        - api_key: []
          Bearer: []
      tags:
        - Transfer Approvals
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/TransferOutIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferApproversNotifyBodyPayload"
            examples:
              typical:
                summary: Example payload
                value:
                  $ref: "resources/examples/transferApproversNotify/transferApproversNotifyPayload.json"
        description: Collection of transfer approvers to notify.
        required: true
      responses:
        '200':
          description: Success message.
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "POST"
        uri: "https://${stageVariables.url}/users/{userId}/transfers/{transferId}/notify"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.transferId: "method.request.path.transferId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/users/{userId}/namedDepositors":
    post:
      summary: Create a Named Depositor
      description: A Named Depositor is a depositor which we identify by name when
        matching/clearing the deposit we receive. The more accurate this name is,
        the faster the money will be cleared to the user's wallet.
      operationId: createUsersNamedDepositor
      security:
        - api_key: []
          Bearer: []
      tags:
        - Named Depositors
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
      requestBody:
        $ref: "#/components/requestBodies/NamedDepositorPayload"
      responses:
        '201':
          description: A Named Depositor Entity
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/NamedDepositor"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "POST"
        uri: "https://${stageVariables.url}/users/{userId}/namedDepositors"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
        responses:
          201:
            statusCode: 201
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          422:
            statusCode: 422
          429:
            statusCode: 429
    get:
      summary: Retrieve a list of Named Depositors
      description: Retrieves a collection of active Named Depositors for a user.
      operationId: getUsersNamedDepositors
      security:
        - api_key: []
          Bearer: []
      tags:
        - Named Depositors
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        '200':
          description: Gets the list of Named Depositors.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/NamedDepositorsCollection"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/namedDepositors"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/users/{userId}/namedDepositors/fields":
    get:
      summary: Retrieve a Named Depositor Fields Collection
      description: Retrieves Named Depositor Fields required for adding/editing a named depositor.
      operationId: getNamedDepositorFields
      security:
        - api_key: []
          Bearer: []
      tags:
        - Named Depositors
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        '200':
          description: Fields collection
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/FieldsMapPureEntity"
              example:
                value:
                  $ref: resources/examples/namedDepositors/fieldsCollection.json
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/namedDepositors/fields"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          429:
            statusCode: 429
  "/users/{userId}/namedDepositors/{id}":
    put:
      summary: Update a Named Depositor
      description: Update a Named Depositor entity.
      operationId: putUsersNamedDepositor
      security:
        - api_key: []
          Bearer: []
      tags:
        - Named Depositors
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/NamedDepositorIdParam"
      requestBody:
        $ref: "#/components/requestBodies/NamedDepositorPayload"
      responses:
        '200':
          description: A Named Depositor Entity
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/NamedDepositor"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "PUT"
        uri: "https://${stageVariables.url}/users/{userId}/namedDepositors/{id}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          422:
            statusCode: 422
          429:
            statusCode: 429
    get:
      summary: Retrieve a Named Depositor
      description: Retrieves a Named Depositor entity.
      operationId: getUsersNamedDepositor
      security:
        - api_key: []
          Bearer: []
      tags:
        - Named Depositors
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/NamedDepositorIdParam"
      responses:
        '200':
          description: A Named Depositor entity.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/NamedDepositor"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/namedDepositors/{id}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          422:
            statusCode: 422
          429:
            statusCode: 429
    delete:
      summary: Delete a Named Depositor
      description: Deletes a Named Depositor entity.
      operationId: deleteNamedDepositor
      security:
        - api_key: []
          Bearer: []
      tags:
        - Named Depositors
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/NamedDepositorIdParam"
      responses:
        '204':
          description: Upon successful deletion.
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "DELETE"
        uri: "https://${stageVariables.url}/users/{userId}/namedDepositors/{id}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: 200
          204:
            statusCode: 204
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          429:
            statusCode: 429
  "/users/{userId}/wallet/transactions":
    get:
      summary: Retrieve a list of Wallet Transactions
      description: Retrieves a collection of Wallet Transactions for a user.
      operationId: getWalletTransactions
      security:
        - api_key: []
          Bearer: []
      tags:
        - User Information
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/WalletTransactionsContextParam"
        - $ref: "#/components/parameters/WalletTransactionsCurrencyParam"
        - $ref: "#/components/parameters/WalletTransactionsStartDateParam"
        - $ref: "#/components/parameters/WalletTransactionsEndDateParam"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - $ref: "#/components/parameters/WalletTransactionsOrderByParam"
        - $ref: "#/components/parameters/OrderDirParam"
      responses:
        '200':
          description: Wallet Transactions collection.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/WalletTransactionsCollection"
              examples:
                collection:
                  summary: Wallet Transactions collection
                  value:
                    - $ref: "resources/examples/transactions/transactionsCollection.json"
                empty:
                  summary: Empty Wallet Transactions collection
                  value:
                    - $ref: "resources/examples/transactions/emptyList.json"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '409':
          $ref: "#/components/responses/RequestConflictWithCurrentState"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-request-validator: params-only
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/wallet/transactions"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.querystring.context: "method.request.querystring.context"
          integration.request.querystring.currency: "method.request.querystring.currency"
          integration.request.querystring.start_date: "method.request.querystring.start_date"
          integration.request.querystring.end_date: "method.request.querystring.end_date"
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.order_by: "method.request.querystring.order_by"
          integration.request.querystring.order_dir: "method.request.querystring.order_dir"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          409:
            statusCode: 409
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/users/{userId}/wallet/transactions/{transactionId}":
    get:
      summary: Retrieve a Wallet Transaction
      description: Retrieves a Wallet Transaction for a user.
      operationId: getWalletTransaction
      security:
        - api_key: []
          Bearer: []
      tags:
        - User Information
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - name: transactionId
          in: path
          description: The ID of the Wallet Transaction.
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/WalletTransactionsContextParam"
        - $ref: "#/components/parameters/WalletTransactionsCurrencyParam"
      responses:
        '200':
          description: Wallet Transaction entity.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/WalletTransactionsEntity"
              examples:
                entity:
                  summary: Wallet Transactions entity
                  value:
                    - $ref: "resources/examples/transactions/transactionsEntity.json"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-request-validator: params-only
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/wallet/transactions/{transactionId}"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.transactionId: "method.request.path.transactionId"
          integration.request.querystring.context: "method.request.querystring.context"
          integration.request.querystring.currency: "method.request.querystring.currency"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          404:
            statusCode: 404
          422:
            statusCode: 422
          429:
            statusCode: 429
  "/users/{userId}/wallet/transactions/export":
    get:
      summary: Export a list of Wallet Transactions
      description: Trigger an export of Wallet Transactions collection into a file.
      operationId: exportWalletTransactions
      security:
        - api_key: []
          Bearer: []
      tags:
        - User Information
      parameters:
        - $ref: "#/components/parameters/AuthorisationHeaderParam"
        - $ref: "#/components/parameters/ApiKeyHeaderParam"
        - $ref: "#/components/parameters/AcceptLanguageHeaderParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/WalletTransactionsFormatParam"
        - $ref: "#/components/parameters/WalletTransactionsContextParam"
        - $ref: "#/components/parameters/WalletTransactionsCurrencyParam"
        - $ref: "#/components/parameters/WalletTransactionsStartDateParam"
        - $ref: "#/components/parameters/WalletTransactionsEndDateParam"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - $ref: "#/components/parameters/OrderByParam"
        - $ref: "#/components/parameters/OrderDirParam"
      responses:
        '200':
          description: Wallet Transaction Export object.
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/WalletTransactionsExport"
              examples:
                entity:
                  summary: Wallet Transactions Export entity
                  value:
                    - $ref: "resources/examples/transactions/transactionsExport.json"
        '401':
          description: Authorisation error.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Header name will be remapped to `x-amzn-Remapped-WWW-Authenticate`
        '403':
          $ref: "#/components/responses/Forbidden"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '429':
          $ref: "#/components/responses/TooManyRequests"
      x-amazon-apigateway-request-validator: params-only
      x-amazon-apigateway-integration:
        x-amazon-apigateway-auth: NONE
        httpMethod: "GET"
        uri: "https://${stageVariables.url}/users/{userId}/wallet/transactions/export"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        type: "http"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
          integration.request.header.xsapi-gateway-key: "stageVariables.gatewayKey"
          integration.request.header.Accept-Language: "method.request.header.Accept-Language"
          integration.request.header.X-Forwarded-For: "context.identity.sourceIp"
          integration.request.header.User-Agent: "context.identity.userAgent"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.querystring.format: "method.request.querystring.format"
          integration.request.querystring.context: "method.request.querystring.context"
          integration.request.querystring.currency: "method.request.querystring.currency"
          integration.request.querystring.start_date: "method.request.querystring.start_date"
          integration.request.querystring.end_date: "method.request.querystring.end_date"
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.order_by: "method.request.querystring.order_by"
          integration.request.querystring.order_dir: "method.request.querystring.order_dir"
        responses:
          200:
            statusCode: 200
          401:
            statusCode: 401
            responseParameters:
              method.response.header.WWW-Authenticate: "integration.response.header.WWW-Authenticate"
          403:
            statusCode: 403
          422:
            statusCode: 422
          429:
            statusCode: 429
components:
  parameters:
    AccountIdParam:
      name: accountId
      in: path
      description: The Bank Account ID.
      required: true
      schema:
        type: integer
        example: 15
    AuthorisationHeaderParam:
      in: header
      name: Authorization
      description: The client must send this token in the Authorization header when making requests to protected resources.
      required: true
      schema:
        type: string
    ApiKeyHeaderParam:
      in: header
      name: x-api-key
      description: The unique secret API Key which must be sent with every request.
      required: true
      schema:
        type: string
    ContentTypeHeaderParam:
      in: header
      name: Content-Type
      description: Indicates the type of data sent.
      required: true
      schema:
        type: string
        example: multipart/form-data
    AcceptLanguageHeaderParam:
      in: header
      name: Accept-Language
      description: Indicates the preferred locale variant.
      required: false
      schema:
        type: string
        example: en
    UserIdParam:
      name: userId
      in: path
      description: The Customer ID for the logged in User.
      required: true
      schema:
        type: integer
        example: 12345
    OrderIdParam:
      name: orderId
      in: path
      description: The Order ID.
      required: true
      schema:
        type: integer
        example: 10
    CountryIdParam:
      name: countryId
      in: path
      description: |
          The ID of the Country entity. See [getCountries](#operation/getCountries).
      required: true
      schema:
        type: integer
        example: 15
    CurrencyCodeParam:
      name: currencyCode
      in: path
      description: The 3 character currency code in ISO 4217 format.
      required: true
      schema:
        type: string
        example: EUR
        pattern: "[A-Z]{3}"
    CurrencyCodeOptionalQueryParam:
      name: currencyCode
      in: query
      description: The 3 character currency code in ISO 4217 format.
      required: false
      schema:
        type: string
        example: EUR
        pattern: "[A-Z]{3}"
    CurrencyQueryParam:
      name: currency
      in: query
      description: The 3 character currency code in ISO 4217 format.
      required: false
      schema:
        type: string
        example: EUR
        pattern: "[A-Z]{3}"
    PageParam:
      name: page
      in: query
      description: Page number in paginated collection.
      required: false
      schema:
        type: integer
        example: 1
    PageSizeParam:
      name: page_size
      in: query
      description: Page size
      required: false
      schema:
        type: integer
        example: 25
        default: 25
        minimum: 1
        maximum: 100
    OrderByParam:
      name: order_by
      in: query
      description: Property name to order by.
      required: false
      schema:
        type: string
        default: timestamp
    OrderDirParam:
      name: order_dir
      in: query
      description: Ordering direction.
      required: false
      schema:
        type: string
        enum:
          - desc
          - asc
        default: desc
    NamedDepositorIdParam:
      name: id
      in: path
      description: The ID of the Named Depositor entity.
      required: true
      schema:
        type: integer
        example: 35833
    TransferOutIdParam:
      name: transferId
      in: path
      description: The ID of transfer.
      required: true
      schema:
        type: integer
        example: 12345
    WalletTransactionsContextParam:
      name: context
      in: query
      description: The context in which transactions are returned - currently only
        'statement'.
      required: true
      schema:
        type: string
        enum:
          - statement
    WalletTransactionsCurrencyParam:
      name: currency
      in: query
      description: Currency filter. ISO 4217 format.
      required: true
      schema:
        type: string
        example: EUR
    WalletTransactionsStartDateParam:
      name: start_date
      in: query
      description: Start date filter in ISO 8601 format. If provided in short form (date-only), the starting time of 00:00:00 (Dublin timezone) is assumed.
      required: true
      schema:
        type: string
        format: date-time
        example: '2020-09-01T13:47:52+01:00'
    WalletTransactionsEndDateParam:
      name: end_date
      in: query
      description: End date filter in ISO 8601 format. If provided in short form (date-only), the ending time of 23:59:59 (Dublin timezone) is assumed.
      required: true
      schema:
        type: string
        format: date-time
        example: '2020-09-10T13:47:52+01:00'
    WalletTransactionsOrderByParam:
      name: order_by
      in: query
      description: Property name to order by. Currently only `timestamp`.
      required: false
      schema:
        type: string
        enum:
          - timestamp
        default: timestamp
    WalletTransactionsFormatParam:
      name: format
      in: query
      required: true
      description: Format of the exported file.
      schema:
        type: string
        enum:
          - csv
          - pdf
          - csv_xero
          - csv_split
  responses:
    NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ApiNotFoundError"
    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ApiForbiddenError"
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ApiUnauthorizedError"
    UnauthorizedMfaRequired:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ApiErrorWithMfaDetails"
    MfaRequired:
      description:  MFA flow needs to be performed in order to call this endpoint.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ApiErrorWithMfaDetails"
    UnprocessableEntity:
      description: Unprocessable Entity.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ApiErrorWithMessages"
    ProfileNotActivated:
      description: Profile not activated.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ApiForbiddenError"
    RequestConflictWithCurrentState:
      description: Indicates a request conflict with the current state of the target resource.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ApiConflictError"
    TooManyRequests:
      description: Too many requests.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ApiTooManyRequestsError"
  requestBodies:
    SimplestObject:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SimplestObject"
      description: Subuser details.
      required: true
    UserRoleBodyPayload:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserRoleBodyPayload"
      description: UserRole details.
      required: true
    NamedDepositorPayload:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NamedDepositorPayload"
      required: true
    TieredPricingPostBody:
      content:
        application/json:
          schema:
            properties:
              areTermsAndConditionsAccepted:
                type: boolean
            required:
              - areTermsAndConditionsAccepted
      required: true
    UpdateTermsAndConditionsBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              termsAndConditionsAccepted:
                type: boolean
            required:
              - termsAndConditionsAccepted
      required: true
  securitySchemes:
    api_key:
      type: apiKey
      description: A unique secret API Key (provided by CurrencyFair in advance) which must be sent with every request.
      name: x-api-key
      in: header
    Bearer:
      type: oauth2
      description: Retrieve/refresh a short-lived access token using a long-lived partner token.
      flows:
        authorizationCode:
          authorizationUrl: None, keys are assigned manually
          tokenUrl: https://www.currencyfair.com/oauth
          refreshUrl: https://www.currencyfair.com/oauth
          scopes:
            xsapi: Authorized access
  schemas:
    TransferStatusEnum:
      type: integer
      enum:
        - 2
        - 3
        - 6
        - 10
      description: |-
        Filter transfers by status code. Possible values:
        * `Confirmed: 2`
        * `Cancelled: 3`
        * `Pending: 6`
        * `Returned: 10`
    TransfersDetailsStatusEnum:
      type: integer
      enum:
        - 1
        - 2
        - 3
      description: |-
        Possible values:
        * `In progress: 1`
        * `On hold:2`
        * `Sent: 3` 
      nullable: true
    PaginationDetails:
      type: object
      properties:
        page_count:
          type: integer
          example: 3
        page_size:
          type: integer
          example: 25
        total_items:
          type: integer
          example: 75
        page:
          type: integer
          example: 1
      required:
        - page_count
        - page_size
        - total_items
        - page
    RegionalEntityEnum:
      type: string
      description: Regional entity of a user.
      enum:
        - 'Ireland'
        - 'Singapore'
        - 'Hong Kong'
    ApiUnprocessableEntityError:
      type: object
      description: The [RFC 7807](https://tools.ietf.org/html/rfc7807) error message.
      properties:
        type:
          type: string
          example: "http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
        title:
          type: string
          example: Unprocessable Entity
        status:
          type: integer
          description: HTTP status code.
          example: 422
        detail:
          type: string
          description: Description of the error.
          example: Unable to process entity
        variables:
          type: object
          description: Optional object containing replacement values for errors with variables.
          additionalProperties: true
      required:
        - type
        - title
        - status
        - detail
    ApiNotFoundError:
      type: object
      description: The [RFC 7807](https://tools.ietf.org/html/rfc7807) error message.
      properties:
        type:
          type: string
          example: "http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
        title:
          type: string
          example: Not Found
        status:
          type: integer
          description: HTTP status code.
          example: 404
        detail:
          type: string
          description: Description of the error.
          example: Entity not found
        variables:
          type: object
          description: Optional object containing replacement values for errors with variables.
          additionalProperties: true
      required:
        - type
        - title
        - status
        - detail
    ApiForbiddenError:
      type: object
      description: The [RFC 7807](https://tools.ietf.org/html/rfc7807) error message.
      properties:
        type:
          type: string
          example: "http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
        title:
          type: string
          example: Forbidden
        status:
          type: integer
          description: HTTP status code.
          example: 403
        detail:
          type: string
          description: Description of the error.
          example: This action is forbidden
        variables:
          type: object
          description: Optional object containing replacement values for errors with variables.
          additionalProperties: true
      required:
        - type
        - title
        - status
        - detail
    ApiUnauthorizedError:
      type: object
      description: The [RFC 7807](https://tools.ietf.org/html/rfc7807) error message.
      properties:
        type:
          type: string
          example: "http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
        title:
          type: string
          example: Unauthorized
        status:
          type: integer
          description: HTTP status code.
          example: 401
        detail:
          type: string
          description: Description of the error.
          example: You need to pass MFA to access this endpoint
        variables:
          type: object
          description: Optional object containing replacement values for errors with variables.
          additionalProperties: true
      required:
        - type
        - title
        - status
        - detail
    ApiConflictError:
      type: object
      description: The [RFC 7807](https://tools.ietf.org/html/rfc7807) error message.
      properties:
        type:
          type: string
          example: "http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
        title:
          type: string
          example: Forbidden
        status:
          type: integer
          description: HTTP status code.
          example: 409
        detail:
          type: string
          description: Description of the error.
          example: Invalid Page provided
        variables:
          type: object
          description: Optional object containing replacement values for errors with variables.
          additionalProperties: true
      required:
        - type
        - title
        - status
        - detail
    ApiTooManyRequestsError:
      type: object
      description: The [RFC 7807](https://tools.ietf.org/html/rfc7807) error message.
      properties:
        type:
          type: string
          example: "http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
        title:
          type: string
          example: Too Many Requests
        status:
          type: integer
          description: HTTP status code.
          example: 429
        detail:
          type: string
          description: Description of the error.
          example: Too Many Requests
        variables:
          type: object
          description: Optional object containing replacement values for errors with variables.
          additionalProperties: true
      required:
        - type
        - title
        - status
        - detail
    ApiErrorWithFailureMessages:
      allOf:
        - $ref: "#/components/schemas/ApiUnprocessableEntityError"
        - type: object
          description: The [RFC 7807](https://tools.ietf.org/html/rfc7807) error message with additional failure messages.
          properties:
            failure_messages:
              type: object
              description: "Array holding failure message (messageId => message)."
              additionalProperties:
                type: string
    ApiErrorWithValidationMessages:
      allOf:
        - $ref: "#/components/schemas/ApiUnprocessableEntityError"
        - type: object
          description: The [RFC 7807](https://tools.ietf.org/html/rfc7807) error message with additional validation messages
          properties:
            validation_messages:
              type: object
              description: Object holding validation messages.
    ApiErrorWithMessages:
      allOf:
        - type: object
          description: The [RFC 7807](https://tools.ietf.org/html/rfc7807) error message with additional validation or failure messages
        - $ref: "#/components/schemas/ApiErrorWithFailureMessages"
        - $ref: "#/components/schemas/ApiErrorWithValidationMessages"
    ApiErrorWithMfaDetails:
      allOf:
        - $ref: "#/components/schemas/ApiUnauthorizedError"
        - type: object
          description: The [RFC 7807](https://tools.ietf.org/html/rfc7807) error message with additional details required to perform the [MFA](#section/Performing-MFA-flow) flow.
          properties:
            mfa_messages:
              type: object
              description: Array of data required for MFA flow.
              additionalProperties:
                type: string
          required:
            - mfa_messages
    CountriesEntity:
      type: object
      properties:
        id:
          type: number
          description: |
            The ID of the Country entity. See [getCountries](#operation/getCountries).
          example: 15
        countryCode:
          type: string
          description: Two-letter ISO 3166 country code.
          example: IE
        name:
          type: string
          description: Country name.
          example: Ireland
        dialCode:
          type: string
          description: Phone dial code.
          example: "353"
        allowsRegistration:
          type: boolean
          description: Defines if customers residing in the country are allowed to register.
        registrationMessage:
          type: string
          nullable: true
          deprecated: true
          description: Optional message to show if not allowed to register.
        _embedded:
          type: object
          properties:
            defaultCurrency:
              $ref: "#/components/schemas/CurrenciesEntity"
          required:
            - defaultCurrency
      required:
        - id
        - countryCode
        - name
        - dialCode
        - allowsRegistration
        - registrationMessage
    CountriesEntitySimplified:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
      required:
        - id
    CountriesCollection:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            countries:
              type: array
              items:
                $ref: "#/components/schemas/CountriesEntity"
          required:
            - countries
        total_items:
          type: integer
      required:
        - _embedded
        - total_items
    NationalitiesEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        label:
          description: Label text for the Nationality.
          type: string
      required:
        - id
        - label
    CurrenciesEntity:
      type: object
      properties:
        currencyCode:
          $ref: "#/components/schemas/CurrencyCode"
        description:
          type: string
          description: Currency name.
          example: Euro
        minimumSellAmount:
          type: number
          format: float
          description: Minimum amount that can be sold when exchanging.
          example: 10
        minDeposit:
          type: number
          format: float
          description: Minimum amount that can be deposited.
          example: 10
        maxDeposit:
          type: number
          format: float
          description: Maximum amount that can be deposited.
          example: 100000
        roundingScale:
          type: number
          description: Number of decimal places to round amounts in this currency.
            Rounding method is "half up".
          example: 2
        marketplaceEnabled:
          type: boolean
          description: Is marketplace trading allowed for this currency.
          example: true
        aqtOnly:
          type: boolean
          description: Is this an Automatic Quick Trade (aka. Send Money) only currency.
          example: false
        buyOnly:
          type: boolean
          description: Is this a buy only currency. Cannot be sold on the Exchange.
          example: false
        acceptDeposits:
          type: boolean
          description: Do we accept deposits in this currency.
          example: true
        targetCurrencies:
          description: A list of currencies which this currency can be exchanged for.
          type: array
          items:
            $ref: "#/components/schemas/CurrenciesEntitySimplified"
      required:
        - currencyCode
        - description
        - minimumSellAmount
        - roundingScale
        - minDeposit
        - maxDeposit
        - marketplaceEnabled
        - aqtOnly
        - buyOnly
        - acceptDeposits
        - targetCurrencies
    CurrenciesEntitySimplified:
      type: object
      properties:
        currencyCode:
          $ref: "#/components/schemas/CurrencyCode"
      required:
        - currencyCode
    CurrenciesCollection:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            currencies:
              type: array
              items:
                $ref: "#/components/schemas/CurrenciesEntity"
          required:
            - currencies
        total_items:
          type: integer
      required:
        - _embedded
        - total_items
    ComparisonQuotesEntity:
      type: object
      properties:
        currencyFrom:
          $ref: "#/components/schemas/CurrencyFrom"
        currencyTo:
          $ref: "#/components/schemas/CurrencyTo"
        type:
          type: string
          example: SELL
          enum:
            - BUY
            - SELL
        amountInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        savingsInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        currencyFair:
          $ref: "#/components/schemas/CurrencyFairQuoteObject"
        bank:
          $ref: "#/components/schemas/BankQuoteObject"
        totalSavings:
          $ref: "#/components/schemas/TotalSavingsObject"
        smartRates:
          $ref: "#/components/schemas/ComparisonQuoteSmartRateEntity"
        _embedded:
          $ref: "#/components/schemas/ComparisonQuoteEmbedded"
      required:
        - currencyFrom
        - currencyTo
        - type
        - amountInfo
        - savingsInfo
        - currencyFair
        - bank
        - totalSavings
        - smartRates
        - _embedded
    ComparisonQuoteSmartRateEntity:
      type: object
      properties:
        isFTTSmartRate:
          type: boolean
          example: false
          description: Indicates whether a promotional rate has been applied.
      required:
        - isFTTSmartRate
    ComparisonQuoteEmbedded:
      type: object
      properties:
        paymentMethods:
          type: array
          items:
            $ref: "#/components/schemas/PaymentMethodEntity"
      required:
        - paymentMethods
    QuickTradeQuotesEntity:
      type: object
      properties:
        quote:
          $ref: "#/components/schemas/QuickTradeQuotesQuoteObject"
        rateInfo:
          $ref: "#/components/schemas/RateInfoStandardInverseObject"
      required:
        - quote
        - rateInfo
    QuickTradeQuotesQuoteObject:
      type: object
      properties:
        currencyFrom:
          $ref: "#/components/schemas/CurrencyFrom"
        currencyTo:
          $ref: "#/components/schemas/CurrencyTo"
        type:
          type: string
        amountInfo:
          $ref: "#/components/schemas/AmountInfoBuySellObject"
      required:
        - currencyFrom
        - currencyTo
        - type
        - amountInfo
    QuickTradeOrdersEntity:
      type: object
      properties:
        savingsInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        _embedded:
          $ref: "#/components/schemas/QuickTradeOrdersEmbeddedObject"
      required:
        - savingsInfo
        - _embedded
    QuickTradeOrdersEmbeddedObject:
      type: object
      description: New OrdersEntity object.
      properties:
        quote:
          $ref: "#/components/schemas/OrdersEntity"
      required:
        - quote
    CurrencyFairQuoteObject:
      type: object
      properties:
        transferFee:
          type: number
          format: float
          example: 10
        rateInfo:
          $ref: "#/components/schemas/RateInfoObject"
        inverseRateInfo:
          $ref: "#/components/schemas/RateInfoObject"
        amountInfo:
          $ref: "#/components/schemas/AmountInfoObject"
      required:
        - transferFee
        - rateInfo
        - inverseRateInfo
        - amountInfo
    BankQuoteObject:
      type: object
      required:
        - transferFee
        - rateInfo
        - inverseRateInfo
        - amountInfo
      properties:
        transferFee:
          type: number
          format: float
          description: The fee charged by a bank for a transfer.
          example: 25.5
        rateInfo:
          $ref: "#/components/schemas/RateInfoObject"
        inverseRateInfo:
          $ref: "#/components/schemas/RateInfoObject"
        amountInfo:
          $ref: "#/components/schemas/AmountInfoObject"
    TotalSavingsObject:
      type: object
      properties:
        currencyCode:
          $ref: "#/components/schemas/CurrencyCode"
        currencySymbol:
          $ref: "#/components/schemas/CurrencySymbol"
        savingsRate:
          type: number
          format: float
          description: The rate of savings.
          example: 1.5
        amountInfo:
          $ref: "#/components/schemas/AmountInfoObject"
      required:
        - currencyCode
        - currencySymbol
        - savingsRate
        - amountInfo
    UsersEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        salutation:
          type: string
          nullable: true
          example: Mr.
        firstname:
          type: string
          example: John
        middleName:
          type: string
          nullable: true
        surname:
          type: string
          example: Doe
        dateOfBirth:
          type: string
          format: date
          nullable: true
          example: 1977-11-11
        email:
          type: string
          format: email
          example: john.doe@example.com
        address1:
          type: string
          nullable: true
          example: 12 Main Street
        address2:
          type: string
          nullable: true
        address3:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
          example: Dublin
        postCode:
          type: string
          nullable: true
          example: D01
        isCompany:
          type: boolean
        regionalEntity:
          $ref: "#/components/schemas/RegionalEntityEnum"
        isSubUser:
          type: boolean
        _embedded:
          $ref: "#/components/schemas/UsersEmbedded"
      required:
        - id
        - salutation
        - firstname
        - middleName
        - surname
        - dateOfBirth
        - email
        - address1
        - address2
        - address3
        - city
        - postCode
        - isCompany
        - regionalEntity
        - isSubUser
        - _embedded
    UsersEmbedded:
      type: object
      properties:
        country:
          $ref: "#/components/schemas/CountriesEntity"
        nationality:
          $ref: "#/components/schemas/NationalitiesEntity"
        language:
          $ref: "#/components/schemas/LanguagesEntity"
        state:
          $ref: "#/components/schemas/UsersStatesEntity"
        phone:
          $ref: "#/components/schemas/ContactInfoEntity"
        capabilities:
          $ref: "#/components/schemas/UsersCapabilitiesEntity"
        role:
          $ref: "#/components/schemas/UserRoleEntity"
        company:
          $ref: "#/components/schemas/CompanyEntity"
      required:
        - country
        - language
        - state
        - capabilities
        - role
    CompanyEntity:
      type: object
      properties:
        name:
          type: string
          description: Name of the company
          example: CurrencyFair ltd.
        dualApprovalEnabled:
          type: boolean
          description: If a User has the Dual Approval functionality enabled.
        defaultCurrencyCode:
          type: string
          description: Default currency code that is used for various calculations (currently used in Dual Approval functionality).
          example: EUR
      required:
        - name
        - dualApprovalEnabled
        - defaultCurrencyCode
    IdParam:
      type: integer
      example: 15
      description: The ID of the entity.
    CreatedDate:
      type: string
      format: date-time
      description: The date of creation. ISO 8601 format.
      example: '2025-04-25T15:06:39+01:00'
    UpdatedDate:
      type: string
      format: date-time
      description: The last updated date. ISO 8601 format.
      example: '2025-04-25T15:06:39+01:00'
    UsersSimplifiedObjectOrNull:
      allOf:
        - nullable: true
          description: Simplified User object or null.
        - $ref: "#/components/schemas/UsersSimplifiedObject"
    UsersSimplifiedObject:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        firstname:
          type: string
          example: Joe
        surname:
          type: string
          example: Bloggs
      required:
        - id
        - firstname
        - surname
    ContactInfoEntity:
      type: object
      properties:
        number:
          type: string
          description: Phone number
          example: 868171532
        countryId:
          "$ref": "#/components/schemas/CountryId"
        dialCode:
          type: string
          description: Dial code
          example: '353'
      required:
        - number
        - countryId
        - dialCode
    UsersStatesEntity:
      type: object
      properties:
        label:
          type: string
          description: The name of the state User is in.
          enum:
            - 'PROFILE_INCOMPLETE'
            - 'PROFILE_INCOMPLETE_COMPANY'
            - 'NON_TRIAL_UNDOCUMENTED'
            - 'NON_TRIAL_DOCUMENTED'
            - 'COMPANY'
            - 'ACTIVE'
            - 'LOCKED'
        description:
          type: string
          description:  The description of the state User is in.
    SummariesEntity:
      type: object
      properties:
        lastActivity:
          type: string
          format: date-time
          example: '2020-10-19T13:47:52+01:00'
        pendingDepositInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        pendingTransfersInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        balanceInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        openOrdersInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        fundsAvailableInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        pendingApprovalTransferCount:
          type: integer
          description: The number of transfers in given currency that are pending approval.
        _embedded:
          $ref: "#/components/schemas/SummariesEmbedded"
      required:
        - lastActivity
        - pendingDepositInfo
        - pendingTransfersInfo
        - balanceInfo
        - openOrdersInfo
        - fundsAvailableInfo
        - pendingApprovalTransferCount
        - _embedded
    SummariesEmbedded:
      type: object
      properties:
        currency:
          $ref: "#/components/schemas/CurrenciesEntity"
      required:
        - currency
    SummariesArray:
      type: object
      properties:
        user_summaries:
          type: array
          items:
            $ref: "#/components/schemas/SummariesEntity"
      required:
        - user_summaries
    SummariesCollection:
      type: object
      properties:
        _embedded:
          $ref: "#/components/schemas/SummariesArray"
        total_items:
          type: integer
      required:
        - _embedded
        - total_items
    OrdersEntity:
      type: object
      properties:
        id:
          description: The Order ID.
          allOf:
            - $ref: '#/components/schemas/IdParam'
        created:
          $ref: "#/components/schemas/CreatedDate"
        rateInfo:
          $ref: "#/components/schemas/RateInfoStandardInverseObject"
        amountInfo:
          $ref: "#/components/schemas/AmountInfoBuySellEstimatedObject"
        statusInfo:
          $ref: "#/components/schemas/OrdersStatusObject"
        details:
          type: array
          items:
            $ref: "#/components/schemas/OrdersDetailItemObject"
        isSmartRate:
          type: boolean
          description: Indicates whether this is a promotional rate.
        _embedded:
          $ref: "#/components/schemas/OrdersEmbedded"
      required:
        - id
        - created
        - rateInfo
        - amountInfo
        - statusInfo
        - details
        - isSmartRate
        - _embedded
    OrdersHistoryEntity:
      type: object
      properties:
        id:
          description: The Order ID.
          allOf:
            - $ref: '#/components/schemas/IdParam'
        tradeType:
          type: string
          description: The type of trade.
          enum:
            - MARKET_PLACE
            - QUICK_TRADE
        tradeMode:
          type: string
          description: The trade mode of the Order.
          enum:
            - BUY
            - SELL
        rateInfo:
          $ref: "#/components/schemas/RateInfoObject"
        statusInfo:
          $ref: "#/components/schemas/OrdersStatusObject"
        created:
          $ref: "#/components/schemas/CreatedDate"
        updated:
          $ref: "#/components/schemas/UpdatedDate"
        events:
          type: array
          items:
            $ref: "#/components/schemas/OrdersHistoryEventsObject"
        _embedded:
          $ref: "#/components/schemas/OrdersHistoryEmbedded"
      required:
        - id
        - tradeType
        - tradeMode
        - rateInfo
        - statusInfo
        - created
        - updated
        - events
        - _embedded
    OrdersStatusObject:
      type: object
      properties:
        status:
          type: number
          example: 1
          description: |

            `ACTIVE` : 1

            `CONFIRMED` : 2

            `CANCELLED` : 3

            `EXPIRED` : 4

            `FAILED` : 5

            `PENDING` : 6

            `UNMATCHED` : 7

            `MATCHED_IN_PART` : 8

            `MATCHED_IN_FULL` : 9

            `RETURNED` : 10
        message:
          type: string
          example: Active
      required:
        - status
        - message
    TransfersStatusObject:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/TransferStatusEnum"
        message:
          type: string
          description: Status text
      required:
        - status
        - message
    TransfersDetailsStatusObject:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/TransfersDetailsStatusEnum"
        message:
          type: string
          description: |-
            Status text with translation :
              * `In progress` / `In Bearbeitung` / `En cours` 
              * `On hold` / `Angehalten` / `En attente`
              * `Sent` / `Gesendet` / `Envoyé`
          nullable: true
    SimpleStatusObject:
      type: object
      properties:
        status:
          type: integer
          example: 1
      required:
        - status
    OrdersDetailItemObject:
      type: object
      properties:
        created:
          $ref: "#/components/schemas/CreatedDate"
        rateInfo:
          $ref: "#/components/schemas/RateInfoStandardInverseObject"
        amountInfo:
          $ref: "#/components/schemas/AmountInfoBuySellObject"
        statusInfo:
          $ref: "#/components/schemas/OrdersStatusObject"
      required:
        - created
        - rateInfo
        - amountInfo
        - statusInfo
    OrdersHistoryEventsObject:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        tradeId:
          type: integer
        eventType:
          type: string
          description: The type of event.
          enum:
            - CREATED
            - UPDATED
            - MATCHED
            - CANCELLED
            - BEST_AVAILABLE
        amountInfo:
          $ref: "#/components/schemas/AmountInfoBuySellObject"
        rateInfo:
          $ref: "#/components/schemas/RateInfoObject"
        created:
          $ref: "#/components/schemas/CreatedDate"
        tradeTime:
          type: string
          format: date-time
      required:
        - id
        - tradeId
        - eventType
        - amountInfo
        - rateInfo
        - created
        - tradeTime
    OrdersEmbedded:
      type: object
      properties:
        currencyFrom:
          $ref: "#/components/schemas/CurrenciesEntity"
        currencyTo:
          $ref: "#/components/schemas/CurrenciesEntity"
      required:
        - currencyFrom
        - currencyTo
    OrdersHistoryEmbedded:
      type: object
      properties:
        currencyFrom:
          $ref: "#/components/schemas/CurrenciesEntity"
        currencyTo:
          $ref: "#/components/schemas/CurrenciesEntity"
      required:
        - currencyFrom
        - currencyTo
    OrdersArray:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: "#/components/schemas/OrdersEntity"
      required:
        - orders
    OrdersCollection:
      type: object
      allOf:
        - type: object
          properties:
            _embedded:
              $ref: "#/components/schemas/OrdersArray"
          required:
            - _embedded
        - $ref: "#/components/schemas/PaginationDetails"
    AmountInfoBuySellEstimatedObject:
      type: object
      properties:
        buy:
          $ref: "#/components/schemas/AmountInfoObject"
        sell:
          $ref: "#/components/schemas/AmountInfoObject"
        estimated:
          $ref: "#/components/schemas/AmountInfoObject"
      required:
        - buy
        - sell
        - estimated
    AmountInfoBuySellObject:
      type: object
      properties:
        buy:
          $ref: "#/components/schemas/AmountInfoObject"
        sell:
          $ref: "#/components/schemas/AmountInfoObject"
      required:
        - buy
        - sell
    SimpleNamedDepositorObjectOrNull:
      allOf:
        - nullable: true
        - $ref: "#/components/schemas/SimpleNamedDepositorObject"
    SimpleNamedDepositorObject:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
    SimpleAccountObjectOrNull:
      allOf:
        - nullable: true
        - $ref: "#/components/schemas/SimpleAccountObject"
    SimpleAccountObject:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/IdParam'
      required:
        - accountId
    AmountInfoObject:
      type: object
      description: Represents an amount. The amount *must* be displayed to end used
        with the number of decimal places equal to `scale`, as well as rounded using
        that same `scale`.
      properties:
        amount:
          type: number
          format: float
          description: The numeric value of the amount.
          example: 123.4
        scale:
          type: integer
          description: Rounding scale of the amount.
          example: 2
      required:
        - amount
        - scale
    SimpleAmountObject:
      description: The monetary amount.
      type: object
      properties:
        amount:
          type: number
          format: float
          example: 100.00
      required:
        - amount
    RateInfoStandardInverseObject:
      type: object
      description: Information related to the standard and inverse rates.
      properties:
        standard:
          description: The standard rate.
          allOf:
            - $ref: "#/components/schemas/RateInfoObject"
        inverse:
          description: The inverse rate.
          allOf:
            - $ref: "#/components/schemas/RateInfoObject"
      required:
        - standard
        - inverse
    RateInfoObject:
      type: object
      properties:
        rate:
          type: number
          format: float
          description: The monetary rate.
          example: 10
        scale:
          type: number
          format: int64
          description: The rounding scale of the amount.
          example: 2
      required:
        - rate
        - scale
    MarketplacesEntity:
      type: object
      properties:
        currencyFrom:
          $ref: "#/components/schemas/CurrencyFrom"
        currencyTo:
          $ref: "#/components/schemas/CurrencyTo"
        incrementInfo:
          $ref: "#/components/schemas/IncrementInfoObject"
        limitsInfo:
          $ref: "#/components/schemas/LimitsInfoObject"
        status:
          type: string
          description: The status of the market.
          example: OPEN
          enum:
            - OPEN
            - CLOSED
            - SUSPENDED
        marketStatusMetaData:
          $ref: "#/components/schemas/MarketStatusMetaDataObject"
        items:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/MarketplacesItemEntity"
      required:
        - currencyFrom
        - currencyTo
        - incrementInfo
        - limitsInfo
        - status
        - marketStatusMetaData
        - items
    MarketplacesItemEntity:
      type: object
      properties:
        amountInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        rateInfo:
          $ref: "#/components/schemas/RateInfoObject"
        type:
          type: string
      required:
        - amountInfo
        - rateInfo
        - type
    MarketplacesArray:
      type: object
      properties:
        marketplaces:
          type: array
          items:
            $ref: "#/components/schemas/MarketplacesEntity"
      required:
        - marketplaces
    MarketplacesCollection:
      type: object
      properties:
        _embedded:
          $ref: "#/components/schemas/MarketplacesArray"
      required:
        - _embedded
    IncrementInfoObject:
      type: object
      description: Indicates the amount the value can increment or decrement for the selected currency.
      properties:
        increment:
          type: number
          format: float
          example: 0.0001
        scale:
          type: integer
          example: 4
      required:
        - increment
        - scale
    LimitsInfoObject:
      type: object
      description: The monetary exchange limits for the market.
      properties:
        minimumAmount:
          type: number
          example: 5
          description: The minimum limit amount.
        maximumAmount:
          type: number
          example: 1000000
          description: The maximum limit amount.
      required:
        - minimumAmount
        - maximumAmount
    MarketStatusMetaDataObject:
      type: object
      description: Meta data associated with the current market status.
      properties:
        subStatus:
          type: string
          nullable: true
          example: MARKETS_WEEKEND_CLOSURE
          description: |

            `MARKETS_WEEKEND_CLOSURE` - A scheduled weekend market suspension/closure

            `MARKET_EXCHANGE_NOT_AVAILABLE` - The market is open, but the exchange is unavailable due to being outside of hedging hours

            `MARKET_SPECIFIC_CLOSURE` - A suspension/closure specific to a market
          enum:
            - MARKETS_WEEKEND_CLOSURE
            - MARKET_EXCHANGE_NOT_AVAILABLE
            - MARKET_SPECIFIC_CLOSURE
        nextOpening:
          nullable: true
          type: string
          format: date-time
          description: The next opening date of the market.
        timeZoneId:
          type: string
          nullable: true
          description: The ID associated with the timezone.
          example: Europe/Dublin
        timeZoneDisplayName:
          type: string
          nullable: true
          description: The display name for the timezone.
          example: Europe/Dublin
      required:
        - subStatus
        - nextOpening
        - timeZoneId
        - timeZoneDisplayName
    ComparisonQuotesBodyPayload:
      type: object
      properties:
        currencyFrom:
          $ref: "#/components/schemas/CurrencyFrom"
        currencyTo:
          $ref: "#/components/schemas/CurrencyTo"
        type:
          $ref: "#/components/schemas/QuoteType"
        amountInfo:
          $ref: "#/components/schemas/SimpleAmountObject"
        ignoreFee:
          description: If the CurrencyFair fee should be ignored in calculations.
          type: boolean
          example: false
    CurrencySymbol:
      type: string
      description: The currency symbol.
      example: "€"
    CurrencyCode:
      type: string
      description: The 3 character currency code ISO 4217 format.
      example: EUR
      pattern: "[A-Z]{3}"
    CurrencyFrom:
      type: string
      description: The SELL currency in ISO 4217 format.
      example: EUR
      default: EUR
      pattern: "[A-Z]{3}"
    CurrencyTo:
      type: string
      description: The BUY currency in ISO 4217 format.
      example: GBP
      default: GBP
      pattern: "[A-Z]{3}"
    FieldName:
      type: string
      description: The name of the field.
      example: firstname
    QuoteType:
      type: string
      example: SELL
      description: The type of quote.
      enum:
        - BUY
        - SELL
    QuickTradeQuotesBodyPayload:
      type: object
      properties:
        currencyFrom:
          $ref: "#/components/schemas/CurrencyFrom"
        currencyTo:
          $ref: "#/components/schemas/CurrencyTo"
        type:
          $ref: "#/components/schemas/QuoteType"
        amount:
          description: The quote amount.
          type: number
          format: float
          example: 100.00
    MarketplaceOrdersBodyPayload:
      type: object
      properties:
        currencyFrom:
          $ref: "#/components/schemas/CurrencyFrom"
        currencyTo:
          $ref: "#/components/schemas/CurrencyTo"
        type:
          description: The type of order to executed.
          type: string
          example: BUY
          enum:
            - BUY
            - SELL
        amount:
          description: The amount to be quoted.
          type: number
          format: float
        rate:
          description: The requested rate.
          type: number
          format: float
          example: 1.5
      required:
        - currencyFrom
        - currencyTo
        - type
        - amount
        - rate
    UsersOrderPatchBodyPayload:
      type: object
      properties:
        rate:
          description: The new rate.
          type: number
          format: float
        amount:
          description: The remaining amount that the user wants to change rate for.
          type: number
          format: float
      required:
        - rate
        - amount
    UsersOrderPutBodyPayload:
      type: object
      properties:
        rate:
          description: The quick trade rate presented to user
          type: number
          format: float
        amount:
          description: The amount that users want to exchange
          type: number
          format: float
      required:
        - rate
        - amount
    QuickTradeOrdersBodyPayload:
      type: object
      properties:
        quote:
          $ref: "#/components/schemas/QuickTradeQuotesQuoteObject"
        rateInfo:
          $ref: "#/components/schemas/RateInfoStandardInverseObject"
      required:
        - quote
        - rateInfo
    DepositsCreateBodyPayload:
      type: object
      description: If the `account` property is provided the `currency` is not required.
        `account` is not required when `namedDepositor` is provided.
      properties:
        namedDepositor:
          $ref: "#/components/schemas/SimpleNamedDepositorObjectOrNull"
        account:
          $ref: "#/components/schemas/SimpleAccountObjectOrNull"
        amountInfo:
          $ref: "#/components/schemas/SimpleAmountObject"
        currency:
          description: The 3-characters currency code in ISO 4217 format. If the currency code is provided
            the `account` object is not required.
          type: string
          nullable: true
          example: EUR
      required:
        - amountInfo
    DepositsPatchBodyPayload:
      type: object
      properties:
        statusInfo:
          $ref: "#/components/schemas/SimpleStatusObject"
      required:
        - statusInfo
    OauthResponse:
      type: object
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
        token_type:
          type: string
        scope:
          type: string
      required:
        - access_token
        - expires_in
        - token_type
        - scope
    WhoamiResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        firstname:
          type: string
          example: John
        surname:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        customerCode:
          description: The customer code to be used as a unique customer identifier.
          type: string
        signupDate:
          type: string
          format: datetime
          example: '2020-03-31 13:41:24'
      required:
        - id
        - firstname
        - surname
        - email
        - customerCode
        - signupDate
    CurrencyfairAccountsCollection:
      type: object
      properties:
        _embedded:
          $ref: "#/components/schemas/CurrencyfairAccountsCollectionEmbedded"
      required:
        - _embedded
    CurrencyfairAccountsCollectionEmbedded:
      type: object
      properties:
        currencyfair_accounts:
          type: array
          description: A list of CurrencyFair bank accounts.
          items:
            $ref: "#/components/schemas/CurrencyfairAccountsEntity"
      required:
        - currencyfair_accounts
    CurrencyfairAccountsEntity:
      type: object
      properties:
        accountId:
          type: integer
          description: The ID of the account
          example: 123
        accountName:
          type: string
          description: The name of the account
          example: John Doe's Bank Account
        bankName:
          type: string
          description: The name of the banking institution
          example: Allied Irish Banks Ltd.
        bankAddress:
          type: array
          items:
            type: string
          example:
            - Group Headquarters, Bank centre, Dublin 4 Ireland
        accountInformation:
          type: array
          items:
            $ref: "#/components/schemas/AccountInformation"
        message:
          type: string
          description: 'A message associated with the bank account '
          deprecated: true
        reference:
          type: string
          description: The reference used to identify the bank account
          example: ABC321
        _embedded:
          $ref: "#/components/schemas/CurrencyfairAccountsEntityEmbedded"
      required:
        - accountId
        - accountName
        - bankName
        - bankAddress
        - accountInformation
        - message
        - reference
        - _embedded
    CurrencyfairAccountsEntityEmbedded:
      type: object
      properties:
        currency:
          $ref: "#/components/schemas/CurrenciesEntity"
        fields:
          type: array
          items:
            $ref: "#/components/schemas/Field"
      required:
        - currency
        - fields
    LanguagesEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        name:
          type: string
          description: Language label
        code:
          type: string
          description: Language code
      required:
        - id
        - name
        - code
    AccountInformation:
      type: object
      description: Contains miscellaneous information related to a bank account.
      properties:
        name:
          type: string
          description: The name associated with the information.
          example: bankName
        label:
          type: string
          description: The label associated with the information.
          example: Bank Name
        value:
          type: string
          description: The value of the information.
          example: AIB Bank
      required:
        - name
        - label
        - value
    AccountInformationSimplified:
      type: object
      properties:
        name:
          type: string
          description: The name of associated with the information.
          example: bankName
        value:
          type: string
          description: The value of the information.
          example: AIB Bank
      required:
        - name
        - value
    TransferTypesCollection:
      type: object
      properties:
        _embedded:
          $ref: "#/components/schemas/TransferTypesCollectionEmbedded"
      required:
        - _embedded
    TransferTypesCollectionEmbedded:
      type: object
      properties:
        transferTypes:
          type: array
          items:
            $ref: "#/components/schemas/TransferTypesEntity"
      required:
        - transferTypes
    TransferTypesEntitySimplified:
      type: integer
      description: |
        ID of the transfer type

        `1` - Standard Transfer (Recommended)

        `2` - Priority Transfer (Only to be used with ILS currency)
      enum:
        - 1
        - 2
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
      required:
        - id
    TransferTypesEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        label:
          type: string
      required:
        - id
        - label
    TransferPurposesCollection:
      type: object
      properties:
        _embedded:
          $ref: "#/components/schemas/TransferPurposesCollectionEmbedded"
      required:
        - _embedded
    TransferPurposesCollectionEmbedded:
      type: object
      properties:
        transferPurposes:
          type: array
          items:
            $ref: "#/components/schemas/TransferPurposesEntity"
      required:
        - transferPurposes
    TransferPurposesEntitySimplified:
      type: object
      description: The purpose of the transfer. See [getTransferPurposes](#operation/getTransferPurposes).
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
      required:
        - id
    TransferPurposesEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        label:
          description: The Transfer Purpose label to be displayed.
          example: Donation to a Charity
          type: string
      required:
        - id
        - label
    TransferFeesCollection:
      type: object
      properties:
        _embedded:
          $ref: "#/components/schemas/TransferFeesCollectionEmbedded"
      required:
        - _embedded
    TransferFeesCollectionEmbedded:
      type: object
      properties:
        transferFees:
          type: array
          items:
            $ref: "#/components/schemas/TransferFeesEntity"
      required:
        - transferFees
    TransferFeesEntity:
      type: object
      properties:
        fees:
          type: array
          items:
            $ref: "#/components/schemas/TransferFeesEntityFeesItem"
        _embedded:
          $ref: "#/components/schemas/TransferFeesEntityEmbedded"
      required:
        - fees
        - _embedded
    TransferFeesEntityFeesItem:
      type: object
      properties:
        transferType:
          $ref: "#/components/schemas/TransferTypesEntity"
        amountInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        timeInfo:
          $ref: "#/components/schemas/TimeInfoObject"
        allowTransfer:
          type: boolean
          deprecated: true
      required:
        - transferType
        - amountInfo
        - timeInfo
        - allowTransfer
    TimeInfoObject:
      type: object
      deprecated: true
      properties:
        min:
          description: The estimated minimum number of days in which the event should happen.
          type: integer
          minimum: -1
          example: 1
        max:
          description: The estimated maximum number of days in which the event should happen.
          type: integer
          example: 2
        message:
          description: The description of the estimated time in which the event should happen.
          type: string
          example: 1-2 Business days
      required:
        - min
        - max
        - message
    TransferFeesEntityEmbedded:
      type: object
      properties:
        currency:
          $ref: "#/components/schemas/CurrenciesEntity"
      required:
        - currency
    UsersFreeTransfersCollection:
      type: object
      properties:
        _embedded:
          $ref: "#/components/schemas/UsersFreeTransfersCollectionEmbedded"
      required:
        - _embedded
    UsersFreeTransfersEntityEmbedded:
      type: object
      properties:
        transferType:
          $ref: "#/components/schemas/TransferTypesEntity"
        transfer:
          $ref: "#/components/schemas/TransfersEntity"
      required:
        - transferType
    UsersFreeTransfersCollectionEmbedded:
      type: object
      properties:
        freeTransfersDetail:
          type: array
          items:
            $ref: "#/components/schemas/UsersFreeTransfersEntity"
      required:
        - freeTransfersDetail
    UsersFreeTransfersEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        customerId:
          type: integer
          example: 12345
        startDate:
          type: string
          description: The start date when the reward begins.
          format: date-time
        endDate:
          type: string
          description: The end date when the reward is no longer valid. A null value indicates no end date.
          format: date-time
          nullable: true
        _embedded:
          $ref: "#/components/schemas/UsersFreeTransfersEntityEmbedded"
      required:
        - id
        - customerId
        - startDate
        - endDate
        - _embedded
    UsersAccountsEntitySimplified:
      type: object
      description: The simplified account entity [see here](#operation/getUsersAccount).
      properties:
        accountId:
          type: integer
          example: 123
      required:
        - accountId
    UsersAccountsEntity:
      type: object
      properties:
        accountId:
          type: string
        accountName:
          type: string
          description: The name associated with the account.
          example: Joe Bloggs Bank Account
        bankName:
          type: string
          description: The name of the bank account.
          example: Bank of Ireland
        bankAddress:
          type: array
          description: The address of the bank.
          example: ["Bank of Ireland", "40 Mespil Rd", "Saint Peter's", "Dublin 4", "D04 C2N4"]
          items:
            type: string
        accountInformation:
          type: array
          items:
            $ref: "#/components/schemas/AccountInformation"
        additionalInformation:
          type: string
          nullable: true
          description: Additional information associated with an account.
        createdByCustomer:
          $ref: "#/components/schemas/UsersSimplifiedObjectOrNull"
        beneficiaryAddress:
          type: string
          nullable: true
          description: The address of the beneficiary.
          example: 123 New Town Road, Dublin
        beneficiaryCity:
          type: string
          nullable: true
          description: The city of the beneficiary address.
          example: Dublin
        beneficiaryState:
          type: string
          nullable: true
          description: The state of the beneficiary address.
          example: Co. Dublin
        beneficiaryPostCode:
          type: string
          nullable: true
          description: The post code of the beneficiary address.
          example: A94VH77
        beneficiaryEmail:
          type: string
          nullable: true
          description: The beneficiary email address.
          example: ben@example.com
        beneficiaryEmailSend:
          type: boolean
          nullable: true
          description: Whether to notify the beneficiary when a transfer is executed.
        accountNumber:
          type: string
          nullable: true
          description: The account number.
          example: IE29AIBK93115212345678
        accountNickname:
          type: string
          nullable: true
          description: The nickname associated with the account.
          example: Joe Bloggs Account
        _embedded:
          $ref: "#/components/schemas/UsersAccountsEntityEmbedded"
      required:
        - accountId
        - accountName
        - bankName
        - bankAddress
        - accountInformation
        - additionalInformation
        - createdByCustomer
        - beneficiaryAddress
        - beneficiaryCity
        - beneficiaryState
        - beneficiaryPostCode
        - beneficiaryEmail
        - beneficiaryEmailSend
        - accountNumber
        - accountNickname
        - _embedded
    UsersAccountPatchBodyPayload:
      type: object
      properties:
        accountNickname:
          type: string
          description: The nickname associated with the account.
          example: Joe Bloggs Account
      required:
        - accountNickname
    UsersAccountsBodyPayload:
      type: object
      properties:
        accountName:
          type: string
          description: The name associated with the account.
        bankName:
          type: string
          description: The bank name.
          example: Bank of Ireland
        bankAddress:
          type: array
          description: The bank address.
          example: ["Bank of Ireland", "40 Mespil Rd", "Saint Peter's", "Dublin 4", "D04 C2N4"]
          items:
            type: string
        accountInformation:
          type: array
          description: |
            Array of account details. Required fields depend on thecountry
            and currency. Use [`GET` /countryAccountConfigs](#operation/getCountryAccountConfig) endpoint to retrieve the required account
            number fields. You must add the following details if the account is in theUSA and
            in USD currency: `beneficiaryAddress`, `beneficiaryCity`, `beneficiaryState`,
            `beneficiaryPostCode`, `beneficiaryCountryOfResidence`'
          items:
            $ref: "#/components/schemas/AccountInformationSimplified"
        additionalInformation:
          type: string
          description: Additional information associated with the bank account.
        currency:
          $ref: "#/components/schemas/CurrenciesEntitySimplified"
        country:
          $ref: "#/components/schemas/CountriesEntitySimplified"
        beneficiaryVerification:
          type: object
          description: |
            Verification information related to a beneficiary. For example if the beneficiary has accepted the BullionVault terms.
          example:
            bvaccept: 1
      required:
        - accountName
        - bankName
        - bankAddress
        - accountInformation
        - currency
        - country
    UsersAccountsEntityEmbedded:
      type: object
      properties:
        currency:
          $ref: "#/components/schemas/CurrenciesEntity"
        country:
          $ref: "#/components/schemas/CountriesEntity"
        beneficiaryCountryOfResidence:
          allOf:
            - nullable: true
            - $ref: "#/components/schemas/CountriesEntity"
      required:
        - currency
        - country
    UsersAccountsArray:
      type: object
      properties:
        users_accounts:
          type: array
          items:
            $ref: "#/components/schemas/UsersAccountsEntity"
      required:
        - users_accounts
    UsersAccountsCollection:
      type: object
      properties:
        _embedded:
          $ref: "#/components/schemas/UsersAccountsArray"
        total_items:
          type: integer
      required:
        - _embedded
        - total_items
    DepositsEntitySimplified:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/UsersAccountsEntitySimplified"
      required:
        - account
    DepositsEntityFlatOrNull:
      allOf:
        - nullable: true
        - $ref: "#/components/schemas/DepositsEntityFlat"
    DepositsEntityFlat:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        created:
          $ref: "#/components/schemas/CreatedDate"
        createdBy:
          $ref: "#/components/schemas/UsersSimplifiedObjectOrNull"
        currency:
          $ref: "#/components/schemas/CurrenciesEntity"
        account:
          $ref: "#/components/schemas/UsersAccountsEntity"
        aqt:
          $ref: "#/components/schemas/AutomaticQuickTradesEntitySimplified"
        statusInfo:
          $ref: "#/components/schemas/OrdersStatusObject"
        amountInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        feeAmountInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        nettAmountInfo:
          $ref: "#/components/schemas/AmountInfoObject"
      required:
        - id
        - created
        - createdBy
        - currency
        - account
        - aqt
        - statusInfo
        - amountInfo
        - feeAmountInfo
        - nettAmountInfo
    DepositsEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        created:
          $ref: "#/components/schemas/CreatedDate"
        createdBy:
          $ref: "#/components/schemas/UsersSimplifiedObjectOrNull"
        cancelledBy:
          $ref: "#/components/schemas/UsersSimplifiedObjectOrNull"
        statusInfo:
          $ref: "#/components/schemas/OrdersStatusObject"
        amountInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        feeAmountInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        nettAmountInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        _embedded:
          $ref: "#/components/schemas/DepositsEntityEmbedded"
      required:
        - id
        - created
        - createdBy
        - cancelledBy
        - statusInfo
        - amountInfo
        - feeAmountInfo
        - nettAmountInfo
        - _embedded
    DepositsEntityEmbedded:
      type: object
      properties:
        currency:
          $ref: "#/components/schemas/CurrenciesEntity"
        account:
          $ref: "#/components/schemas/UsersAccountsEntity"
        aqt:
          $ref: "#/components/schemas/AutomaticQuickTradesEntitySimplified"
        statusInfo:
          $ref: "#/components/schemas/OrdersStatusObject"
      required:
        - currency
        - account
        - aqt
        - statusInfo
    DepositsArray:
      type: object
      properties:
        deposits:
          type: array
          items:
            $ref: "#/components/schemas/DepositsEntity"
      required:
        - deposits
    DepositsCollection:
      allOf:
        - type: object
          properties:
            _embedded:
              $ref: "#/components/schemas/DepositsArray"
          required:
            - _embedded
        - $ref: "#/components/schemas/PaginationDetails"
    CountryAccountConfigsEntity:
      type: object
      properties:
        currencyFields:
          type: array
          description: |
            An array containing each of the field objects required for the Bank Account for the country and currency code.
          items:
            $ref: "#/components/schemas/CountryAccountConfigsCurrencyField"
        ibanTotalLength:
          type: integer
          description: Length of IBAN field.
          deprecated: true
        defaultCurrencyCode:
          type: string
          description: The default currency to use for the Country.
        customerMessage:
          type: string
          description: A message to display to the user when entering new Bank Account information. Empty string if none.
        _embedded:
          $ref: "#/components/schemas/CountryAccountConfigsEmbedded"
      required:
        - currencyFields
        - ibanTotalLength
        - defaultCurrencyCode
        - customerMessage
        - _embedded
    CountryAccountConfigsEmbedded:
      type: object
      properties:
        country:
          $ref: "#/components/schemas/CountriesEntity"
      required:
        - country
    CountryAccountConfigsCurrencyField:
      type: object
      properties:
        currencyCode:
          $ref: "#/components/schemas/CurrencyCode"
        fields:
          type: array
          items:
            $ref: "#/components/schemas/CountryAccountConfigsCurrencyFieldEntry"
      required:
        - currencyCode
        - fields
    CountryId:
      type: integer
      description: The ID of the Country entity.
      example: 15
    CountryAccountConfigsCurrencyFieldEntry:
      type: object
      properties:
        name:
          type: string
          description: The name of the field.
          example: accountNumber
        label:
          type: string
          description: The label for the field.
          example: Account Number
        precheck:
          type: boolean
          description: |
            This property indicates whether this field should be displayed initially to the user as part of a "precheck".
            The fields indicated as precheck fields must be populated first, then a lookup performed on the account
            data. Once the account lookup is performed, the remaining non "precheck" fields should be shown to the user
            for further population.
          example: true
        type:
          type: string
          description: The type of the field. If missing, the type is "text".
          default: text
          enum:
            - text
            - listNonAdditiveNoIDs # indicates the list cannot be added to, IDs should not be shown
        tooltip:
          type: string
          description: A tooltip for the field.
          example: This is the local bank identifier number
        readonly:
          type: boolean
          description: Indicates if the field is read-only and not to be edited by the user.
          example: false
        value:
          oneOf:
            - type: string
              description: |
                A "text" type field may have an empty string as the value, a `listNonAdditiveNoIDs` field type
                would have an array.
            - type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: The value of the entry
                  desc:
                    type: string
                    description: The label of the entry
        validation:
          nullable: true
          type: array
          description: The validator(s) which apply to the field value.
          items:
            "$ref": "#/components/schemas/FieldValidator"
        filter:
          nullable: true
          type: array
          items:
            "$ref": "#/components/schemas/FieldFilter"
      required:
        - name
        - label
        - precheck
    AccountsBankLookupBodyPayload:
      type: object
      properties:
        country:
          $ref: "#/components/schemas/CountriesEntitySimplified"
        accountInformation:
          type: array
          description: An array of account information to validate
          items:
            $ref: "#/components/schemas/AccountInformation"
      required:
        - country
        - accountInformation
    RequireBeneficiaryVerificationBodyPayload:
      type: object
      properties:
        iban:
          description: The IBAN number. If provided, `accountNumber` and `sortCode` are not required.
          type: string
          example: IE25HDRD73367504201086
        accountNumber:
          description: The Account Number. Required if `IBAN` is not provided.
          type: integer
          example: 21301283
        sortCode:
          description: The Account Sort Code. Required if `IBAN` is not provided.
          type: integer
          example: 931365
        country:
          $ref: "#/components/schemas/CountriesEntitySimplified"
    RequireBeneficiaryVerificationEntity:
      type: object
      properties:
        name:
          type: string
          example: bvaccept
        label:
          type: string
          example: BullionVault Confirmation
        message:
          type: string
          example: Please confirm that you are adding a BullionVault account
        messageExtra:
          type: string
          example: By doing so, you are agreeing to allow us to pass your details on to BullionVault on your behalf
      required:
        - name
        - label
        - message
        - messageExtra
    AutomaticQuickTradesBodyPayload:
      type: object
      properties:
        order:
          $ref: "#/components/schemas/QuickTradeQuotesEntity"
        deposit:
          $ref: "#/components/schemas/DepositsEntitySimplified"
        transfer:
          $ref: "#/components/schemas/TransfersEntitySimplified"
      required:
        - order
        - deposit
        - transfer
    AutomaticQuickTradesCollection:
      type: object
      properties:
        _embedded:
          $ref: "#/components/schemas/AutomaticQuickTradesEmbedded"
      required:
        - _embedded
    AutomaticQuickTradesEmbedded:
      type: object
      properties:
        aqt:
          type: array
          items:
            $ref: "#/components/schemas/AutomaticQuickTradesEntity"
      required:
        - aqt
    AutomaticQuickTradesEntitySimplified:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        status:
          type: number
      required:
        - id
        - status
    AutomaticQuickTradesEntity:
      type: object
      properties:
        id:
          type: number
        deposit:
          $ref: "#/components/schemas/DepositsEntityFlatOrNull"
        created:
          $ref: "#/components/schemas/CreatedDate"
        estimatedArrivalDate:
          $ref: "#/components/schemas/EstimatedArrivalDateObject"
        _embedded:
          $ref: "#/components/schemas/AutomaticQuickTradesEntityEmbedded"
      required:
        - id
        - deposit
        - created
        - estimatedArrivalDate
        - _embedded
    AutomaticQuickTradesEntityEmbedded:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/AutomaticQuickTradesStatusesEntity"
        beneficiaryAccount:
          $ref: "#/components/schemas/UsersAccountsEntitySimplified"
        order:
          $ref: "#/components/schemas/OrdersEntity"
        transfer:
          $ref: "#/components/schemas/TransfersEntity"
      required:
        - status
        - beneficiaryAccount
    AutomaticQuickTradesStatusesCollection:
      type: object
      properties:
        _embedded:
          $ref: "#/components/schemas/AutomaticQuickTradesStatusesEmbedded"
      required:
        - _embedded
    AutomaticQuickTradesStatusesEmbedded:
      type: object
      properties:
        aqtStatuses:
          type: array
          items:
            $ref: "#/components/schemas/AutomaticQuickTradesStatusesEntity"
      required:
        - aqtStatuses
    AutomaticQuickTradesStatusesEntity:
      type: object
      description: The status of the Automatic Quick Trade.
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        label:
          type: string
          example: Active
        description:
          type: string
          example: An active automatic quick trade
      required:
        - id
        - label
        - description
    TransfersEntitySimplified:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/UsersAccountsEntitySimplified"
        transferType:
          $ref: "#/components/schemas/TransferTypesEntitySimplified"
        purpose:
          $ref: "#/components/schemas/TransferPurposesEntitySimplified"
        references:
          type: object
          description: A map of reference fields for the transfer.
          example:
            referenceField1: My Transfer Reference
            referenceField2: My second Transfer Reference
        customTransferPurpose:
          type: string
          description: A custom Transfer Purpose.
          example: Paying for pilot lessons.
        beneficiaryEmailSend:
          description: Whether to notify the beneficiary of the transfer via email.
          type: boolean
          example: true
        beneficiaryEmail:
          description: The beneficiary email address. Unless `beneficiaryEmailSend` is set to `true`, this field
            will be ignored.
          type: string
          example: beneficiary@example.com
      required:
        - account
        - transferType
        - purpose
        - references
        - customTransferPurpose
        - beneficiaryEmailSend
        - beneficiaryEmail
    TransfersEntityEmbedded:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/UsersAccountsEntity"
        transferType:
          $ref: "#/components/schemas/TransferTypesEntity"
        purpose:
          $ref: "#/components/schemas/TransferPurposesEntity"
        currency:
          $ref: "#/components/schemas/CurrenciesEntity"
      required:
        - account
        - transferType
        - purpose
        - currency
    TransactionTimesEntity:
      type: object
      properties:
        estimatedArrivalDate:
          $ref: "#/components/schemas/EstimatedArrivalDateObject"
        _embedded:
          $ref: "#/components/schemas/TransactionTimesEntityEmbedded"
      required:
        - estimatedArrivalDate
        - _embedded
    TransactionTimesEntityEmbedded:
      type: object
      properties:
        currency:
          $ref: "#/components/schemas/CurrenciesEntity"
      required:
        - currency
    EstimatedArrivalDateObject:
      type: object
      description: Contains information about the estimated arrival time of arrival for the action.
      required:
        - intervalText
        - day
        - ordinal
        - month
        - monthText
        - year
      properties:
        intervalText:
          type: string
          description: Time period in which the money should arrive to destination,
            in text.
          example: Today
        day:
          type: integer
          description: The day on which the money should arrive at the destination.
          example: 14
        ordinal:
          type: string
          description: Ordinal suffix for the day number.
          example: th
        month:
          type: integer
          description: The numeric month.
          example: 4
        monthText:
          type: string
          description: The textual month.
          example: April
        year:
          type: integer
          description: The numeric year.
          example: 2025
    ImagesEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        name:
          type: string
          description: The name of the Image.
        type:
          type: string
          description: The MIME type of the Image.
        height:
          type: integer
          description: The height of the Image (in pixels).
        width:
          type: integer
          description: The width of the Image (in pixels).
        link:
          type: string
          description: The URL where the Image can be found.
      required:
        - id
        - name
        - type
        - height
        - width
        - link
    OnlineBanksEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        name:
          type: string
          description: The name of the Online Bank.
        link:
          type: string
          description: The link to the Online Bank's website.
        androidPackageName:
          type: string
          description: An (optional) Android package name associated with the Online Bank.
          nullable: true
        iosUrlScheme:
          type: string
          description: An (optional) iOS Url Scheme in use by the Online Bank.
          nullable: true
        _embedded:
          $ref: "#/components/schemas/OnlineBanksEntityEmbedded"
      required:
        - id
        - name
        - link
        - _embedded
    OnlineBanksEntityEmbedded:
      type: object
      properties:
        image:
          $ref: "#/components/schemas/ImagesEntity"
        country:
          $ref: "#/components/schemas/CountriesEntity"
      required:
        - image
        - country
    OnlineBanksCollectionArray:
      type: object
      properties:
        onlineBanks:
          type: array
          items:
            $ref: "#/components/schemas/OnlineBanksEntity"
      required:
        - onlineBanks
    OnlineBanksCollection:
      type: object
      properties:
        _embedded:
          $ref: "#/components/schemas/OnlineBanksCollectionArray"
      required:
        - _embedded
    CountryActivationConfigsObject:
      type: object
      properties:
        countryId:
          "$ref": "#/components/schemas/CountryId"
        fields:
          type: array
          items:
            $ref: "#/components/schemas/CountryActivationConfigsFieldsObject"
      required:
        - countryId
        - fields
    CountryActivationConfigsFieldsObject:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        label:
          type: string
        required:
          type: boolean
        meta:
          type: array
          items:
            $ref: "#/components/schemas/CountryActivationConfigsFieldsMetaObject"
      required:
        - name
        - type
        - label
        - required
    CountryActivationConfigsFieldsMetaObject:
      type: object
      properties:
        type:
          type: string
        label:
          type: string
        value:
          type: string
      required:
        - type
        - label
        - value
    FieldsMapPureEntity: # "pure" meaning not polluted with additional `countryId` or `details` properties
      type: object
      required:
        - _embedded
      properties:
        _embedded:
          "$ref": "#/components/schemas/FieldsMapEmbedded"
    FieldsMapEntity:
      type: object
      required:
        - _embedded
      properties:
        countryId:
          "$ref": "#/components/schemas/CountryId"
        details:
          type: object
          required:
            - customerName
          properties:
            customerName:
              type: string
        _embedded:
          $ref: "#/components/schemas/FieldsMapEmbedded"
    FieldsMapEmbedded:
      type: object
      required:
        - fields
      properties:
        fields:
          type: array
          items:
            $ref: "#/components/schemas/Field"
    Field:
      type: object
      properties:
        name:
          "$ref": "#/components/schemas/FieldName"
        type:
          type: string
          description: |
            The type of the field.

            - ```text```: A text field
            - ```textarea```: A textarea field
            - ```list```: A list field
            - ```checkbox```: A checkbox field
            - ```image```: An image field to indicate an image is to be displayed
            - ```date```: An date field
            - ```file```: A file upload field
            - ```uploadedFile```: Used as a banner indicating that the file is already uploaded
            - ```awaitingFile```: Used as a banner indicating that a previous file is required to be uploaded
            - ```captcha```: A captcha field
            - ```message```: A message field
            - ```multiSelect```: A multiSelect field
          example: text
          enum:
            - text
            - textarea
            - list
            - checkbox
            - image
            - date
            - file
            - uploadedFile
            - awaitingFile
            - captcha
            - message
            - multiSelect
        label:
          type: string
          description: The label for the field.
          example: Address Line 1
        required:
          type: boolean
          description: Indicates if this field is required data.
          example: true
        tooltip:
          type: string
          description: Text for a tool tip related to the field.
        validators:
          type: array
          items:
            $ref: "#/components/schemas/FieldValidator"
        filters:
          type: array
          items:
            $ref: "#/components/schemas/FieldFilter"
        meta:
          type: array
          description: Holds additional information associated with the given input field.
          items:
            $ref: "#/components/schemas/FieldMeta"
      required:
        - name
        - type
    FieldValidator:
      type: object
      properties:
        validator:
          type: string
          description: A validator to apply on the field value.
          example: minMax
          enum:
            - minLength
            - maxLength
            - minMax
            - digits
            - alphanumeric
            - regex
            - notEmpty
        rules:
          type: object
          properties:
            rules:
              type: object
              description: 'Contains simple validation rules related to the validator. Currently used:
                `minLength, maxLength, regexvalue, jsRegex, pcreRegex`'
              additionalProperties:
                type: string
            optional:
              type: boolean
              description: Indicates if the validator is optional or must be validated.
              example: false
        message:
          type: string
          description: The message to display if the validator fails
          example: The value that you've provided is not the correct length. Please enter the correct length and retry.
      required:
        - validator
    FieldFilter:
      type: object
      properties:
        filter:
          type: string
          description: |
            The name of the filter to apply to the data in the field

            - ```trim```: Indicates white space should be removed from the beginning and the end of the input
            - ```stripWhitespace```: Indicates white space should be removed from the input
            - ```digits```: Indicates input should be cast to an integer
            - ```boolean```: Indicates input should be cast to a boolean
          example: trim
          enum:
            - trim
            - stripWhitespace
            - digits
            - boolean
    FieldMeta:
      type: object
      properties:
        type:
          type: string
          description: |
            Holds information about possible "meta" field types for a field.

            - ```url```: Indicates that the "label" is piece of text to be wrapped with link in "value"
            - ```item```: For listing items in select lists (value => label)
            - ```format```: Indicates that the "value" is the format of text input ('tel', 'datetime', 'number', etc.)
            - ```attribute```: Indicates input field attribute to be set. This should be device agnostic but based on HTML5 input tag attributes. "value" holds the name of attribute, "label" holds the value to be set.
            - ```additionalFields```: Indicates that the field's value is used as a trigger to show some more input fields. For example, we show additional input boxes when a customer selects a country from a dropdown list and we separate sets of fields per country.
            - ```modal```: Indicates that the "label" is piece of text to be wrapped with a link showing modal with content from "value"
            - ```hidden```: Indicates that the field should be hidden
            - ```placeholder```: The placeholder attribute for field
            - ```image```: Various images to be used by custom field. 'label' holds identifier defined by specific design. The 'label' holds link to the image endpoint in API.
            - ```button```: Indicates a button for field
            - ```id```: Element ID for a field
          example: url
          enum:
            - url
            - item
            - format
            - attribute
            - additionalFields
            - modal
            - hidden
            - placeholder
            - image
            - button
            - id
        value:
          type: string
          description: The value to use in the context of the meta type.
        label:
          type: string
          description: The label to use in the context of the meta type.
      required:
        - type
    PaymentMethodsEntity:
      type: object
      description: The Payment Method Collection.
      properties:
        currencyCode:
          type: string
        _embedded:
          type: object
          properties:
            methods:
              type: array
              items:
                $ref: "#/components/schemas/PaymentMethodEntity"
      required:
        - currencyCode
        - _embedded
    PaymentMethodEntity:
      type: object
      description: The Payment Method Entity.
      properties:
        code:
          type: string
          enum:
            - bpay
            - account
            - payNow
            - paymentCard
        label:
          type: string
          description: The name of the payment method.
          example: Bpay
        group:
          type: object
          description: The group in which the payment method belongs.
          properties:
            label:
              type: string
              description: The label associated with the payment method group.
              example: Zero cost deposit
            name:
              type: string
              example: noCost
              description: The name of the payment method group.
          required:
            - label
            - name
        minimumAmount:
          type: number
          format: float
          description: The minimum payment amount.
          example: 1.00
        maximumAmount:
          type: number
          format: float
          description: The maximum payment amount.
          example: 10000000.00
        available:
          type: boolean
          description: Whether the payment method is currently available.
          example: true
        depositFee:
          type: object
          properties:
            type:
              type: string
              description: The type of deposit fee.
              enum:
                - percentage
                - amount
            value:
              type: number
              format: float
              description: The numeric fee value.
              example: 100.15
            scale:
              type: number
              format: integer
              description: Rounding scale of the deposit fee.
              example: 2
        statusMessage:
          type: string
          description: The status message associated with a payment method.
          example: This deposit method is currently unavailable.
        _embedded:
          type: object
          properties:
            transactionTime:
              type: object
              required:
                - estimatedArrivalDate
              properties:
                estimatedArrivalDate:
                  $ref: "#/components/schemas/EstimatedArrivalDateObject"
                _embedded:
                  type: object
                  required:
                    - currency
                  properties:
                    currency:
                      $ref: "#/components/schemas/CurrenciesEntity"
            account:
              $ref: "#/components/schemas/CurrencyfairAccountsEntity"
            bpay:
              $ref: "#/components/schemas/BpayEntity"
            paynow:
              $ref: "#/components/schemas/CurrencyfairAccountsEntity"
      required:
        - code
        - label
        - group
        - minimumAmount
        - maximumAmount
        - available
        - depositFee
        - statusMessage
        - _embedded
    BpayEntity:
      type: object
      properties:
        billerCode:
          type: number
          description: The Bpay biller code. Biller Codes are required to process
            BPay transaction and are used to identify where the money is being sent.
          example: 1234
        reference:
          type: number
          description: The reference, or CRN, is unique number used to identify a
            Bpay account
          example: 12341234
      required:
        - billerCode
        - reference
    SimpleObject:
      type: object
      additionalProperties:
        type: string
    SimplestObject:
      type: object
    UsersCapabilitiesEntity:
      type: object
      description: Flags defining what actions the user can make. This is now deprecated, use user's Role object instead.
      deprecated: true
      required:
        - canLogin
        - canTrade
        - canDeposit
        - canTransfer
        - canEditProfile
        - canManageAccounts
        - canAqt
      properties:
        canLogin:
          type: boolean
        canTrade:
          type: boolean
        canDeposit:
          type: boolean
        canTransfer:
          type: boolean
        canEditProfile:
          type: boolean
        canManageAccounts:
          type: boolean
        canAqt:
          type: boolean
    TransferOutBodyPayload:
      type: object
      required:
        - account
        - amountInfo
        - transferType
        - feeInfo
        - references
        - purpose
        - customTransferPurpose
      properties:
        account:
          type: object
          required:
            - accountId
          properties:
            accountId:
              type: integer
              description: Customer's account ID to transfer the money to [see here](#operation/getUsersAccounts).
              example: 123456
        amountInfo:
          type: object
          required:
            - amount
          properties:
            amount:
              type: number
              format: float
              description: The amount of money to transfer out.
              example: 1234.56
        transferType:
          type: object
          required:
            - id
          properties:
            id:
              description: |
                  ID of the transfer type

                  `1` - Standard (Recommended)

                  `2` - Priority (Only to be used with ILS currency)
              allOf:
                - $ref: '#/components/schemas/IdParam'
        feeInfo:
          type: object
          required:
            - currency
          properties:
            currency:
              type: object
              required:
                - currencyCode
              properties:
                currencyCode:
                  $ref: "#/components/schemas/CurrencyCode"
        references:
          type: object
          required:
            - referenceField1
          properties:
            referenceField1:
              type: string
              nullable: true
              description: Reference text of the transfer
              example: Invoice no. 165432
        purpose:
          type: object
          required:
            - id
          properties:
            id:
              description: The ID of transfer purpose of the transfer (<a href='#operation/getTransferPurpose'>see here</a>)
              allOf:
                - $ref: '#/components/schemas/IdParam'
        customTransferPurpose:
          type: string
          nullable: true
          description: If the selected transfer purpose is of type `Other`, this field
            takes the value of customer-entered purpose reason.
          example: Sending money to my friend
        beneficiaryEmailSend:
          type: boolean
          nullable: true
          description: Whether to notify the beneficiary of the transfer via email.
        beneficiaryEmail:
          type: string
          nullable: true
          description: The email of the beneficiary. Required if `beneficiaryEmailSend` is true.
    TransfersEntity:
      type: object
      required:
        - id
        - created
        - references
        - amountInfo
        - feeInfo
        - statusInfo
        - customTransferPurpose
        - estimatedArrivalDate
        - _embedded
      properties:
        id:
          description: The ID the Transfer.
          allOf:
            - $ref: '#/components/schemas/IdParam'
        created:
          $ref: "#/components/schemas/CreatedDate"
        createdBy:
          $ref: "#/components/schemas/UsersSimplifiedObjectOrNull"
        cancelledBy:
          $ref: "#/components/schemas/UsersSimplifiedObjectOrNull"
        references:
          type: object
          required:
            - referenceField1
            - referenceField2
          description: The `reference` text of the transfer.
          properties:
            referenceField1:
              nullable: true
              type: string
              example: Invoice no. 123456
            referenceField2:
              nullable: true
              type: string
        amountInfo:
          $ref: "#/components/schemas/AmountInfoObject"
        feeInfo:
          $ref: "#/components/schemas/FeeInfoObject"
        statusInfo:
          $ref: "#/components/schemas/TransfersStatusObject"
        customTransferPurpose:
          type: string
          description: If the `_embedded.purpose.id` value equals to the `Other` status,
            this property contains the user-entered custom transfer purpose.
          example: Sending money to my friend
        estimatedArrivalDate:
          $ref: "#/components/schemas/EstimatedArrivalDateObject"
        detailsStatusInfo:
          $ref: "#/components/schemas/TransfersDetailsStatusObject"
        _embedded:
          $ref: "#/components/schemas/TransfersEntityEmbedded"
    TransfersCollection:
      type: object
      required:
        - _embedded
      properties:
        _embedded:
          type: object
          required:
            - transfers
          properties:
            transfers:
              type: array
              items:
                $ref: "#/components/schemas/TransfersEntity"
    PatchTransferBodyPayload:
      type: object
      required:
        - statusInfo
      properties:
        statusInfo:
          type: object
          properties:
            status:
              type: number
    UserRoleCapabilities:
      type: object
      description: An object holding key-value pairs, where the key is "capability" of the user, and the boolean flag says if user is allowed to use it.
      required:
        - canCreateDeposits
        - canCancelDeposits
        - canCreateQuickExchange
        - canCreateMarketPlaceExchange
        - canEditMarketPlaceExchange
        - canCancelMarketPlaceExchange
        - canCreateTransfer
        - canApproveTransfer
        - canSelfApproveTransfer
        - canCreateRecipients
        - canRemoveRecipients
        - canCreateSendMoney
        - canCancelSendMoney
        - canManageUsers
        - canManageRecurringTransactions
        - canEditProfile
        - canManageXero
      properties:
        canCreateDeposits:
          type: boolean
        canCancelDeposits:
          type: boolean
        canCreateQuickExchange:
          type: boolean
        canCreateMarketPlaceExchange:
          type: boolean
        canEditMarketPlaceExchange:
          type: boolean
        canCancelMarketPlaceExchange:
          type: boolean
        canCreateTransfer:
          type: boolean
        canApproveTransfer:
          type: boolean
        canSelfApproveTransfer:
          type: boolean
        canCreateRecipients:
          type: boolean
        canRemoveRecipients:
          type: boolean
        canCreateSendMoney:
          type: boolean
        canCancelSendMoney:
          type: boolean
        canManageUsers:
          type: boolean
        canManageRecurringTransactions:
          type: boolean
        canEditProfile:
          type: boolean
        canManageXero:
          type: boolean
    UserRoleParameters:
      type: object
      description: An object holding various parameters for the role.
      required:
        - approvalThreshold
        - selfApprovalThreshold
        - allowedFlow
        - allowedFlowFallbackMsg
        - allowedFlowFallbackUrl
      properties:
        approvalThreshold:
          type: integer
          nullable: true
          description: Integer value of amount (in company's default currency) up to which the user is allowed to approve other users transfers.
        selfApprovalThreshold:
          type: integer
          nullable: true
          description: Integer value of amount (in company's default currency) up to which the user is allowed to self-approve his own transfers.
        allowedFlow:
          type: string
          nullable: true
          description: |
            The flow the customer is allowed to see after login.
            The values are:
             - 'APPLICATION' - customer is allowed to use the application
             - 'NONE' - customer is not allowed to use the application
             - 'PERSONAL_REGISTRATION' - customer is required to see the invite registration flow
             - 'INVITE_REGISTRATION' - customer is required to see the personal registration flow
             In case of `NONE`, or if the `allowedFlow` is not supported by API client, customer should
             see the `allowedFlowFallbackMsg` and a link to `allowedFlowFallbackUrl`
          enum: [ 'APPLICATION', 'NONE', 'INVITE_REGISTRATION', 'PERSONAL_REGISTRATION']
          example: APPLICATION
        allowedFlowFallbackMsg:
          type: string
          nullable: true
          description: Message to show if the `allowedFlow` is `NONE` or not recognized by API client.
        allowedFlowFallbackUrl:
          type: string
          nullable: true
          description: URL to show if the `allowedFlow` is `NONE` or not recognized by API client.
    UserRoleEntity:
      type: object
      required:
        - id
        - name
        - description
        - readonly
        - capabilities
        - parameters
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        name:
          type: string
          description: Name of the Role.
          example: "Default Role"
        description:
          type: string
          nullable: true
          description: Description of the Role.
          example: "Default Role"
        readonly:
          type: boolean
          description: |
            Built-in Roles are `readonly: true`. Roles added by the user are `readonly: false`.
        capabilities:
          $ref: "#/components/schemas/UserRoleCapabilities"
        parameters:
          $ref: "#/components/schemas/UserRoleParameters"
    UserRoleBodyPayload:
      type: object
      required:
        - name
        - capabilities
        - parameters
      properties:
        name:
          type: string
        capabilities:
          $ref: "#/components/schemas/UserRoleCapabilities"
        parameters:
          $ref: "#/components/schemas/UserRoleParameters"
    TransferApprover:
      type: object
      required:
        - customerId
        - firstname
        - lastname
      properties:
        customerId:
          type: string
        firstname:
          type: string
        lastname:
          type: string
    TransferApproverCollection:
      type: object
      required:
        - _embedded
      properties:
        _embedded:
          type: object
          required:
            - approvers
          properties:
            approvers:
              type: array
              items:
                $ref: "#/components/schemas/TransferApprover"
    TransferApproversNotifyBodyPayload:
      type: object
      required:
        - approvers
      properties:
        approvers:
          type: array
          items:
            type: object
            required:
              - customerId
            properties:
              customerId:
                type: string
    FeeInfoObject:
      type: object
      description: Represents fee amount. The fee amount *must* be displayed to the end
        user with the number of decimal places equal to `scale`, as well as rounded
        using that same `scale`.
      required:
        - currency
        - amount
        - scale
      properties:
        amount:
          type: number
          format: float
          description: The numeric value of the amount.
          example: 123.4
        scale:
          type: integer
          description: Rounding scale of the amount.
          example: 2
        currency:
          type: object
          required:
            - currencyCode
          properties:
            currencyCode:
              type: string
              description: The 3 character currency code ISO 4217 format.
              example: EUR
    AccountValidationResponse:
      type: object
      properties:
        status:
          type: string
          example: 'OK'
      required:
        - status
    NamedDepositorPayload:
      type: object
      properties:
        name:
          description: The name associated with the Named Depositor.
          type: string
          example: Max Mustermann
        description:
          description: A description associated with the Named Depositor.
          type: string
          example: A description of the Named Depositor.
      required:
        - name
    NamedDepositor:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        customerId:
          type: integer
          example: 12345
        name:
          type: string
          example: Max Mustermann
        description:
          type: string
          example: A description relevant to the Named Depositor.
      required:
        - id
        - customerId
        - name
        - description
    NamedDepositorsArray:
      type: object
      properties:
        namedDepositors:
          type: array
          items:
            $ref: "#/components/schemas/NamedDepositor"
      required:
        - namedDepositors
    NamedDepositorsCollection:
      allOf:
        - type: object
          properties:
            _embedded:
              $ref: "#/components/schemas/NamedDepositorsArray"
          required:
            - _embedded
        - $ref: "#/components/schemas/PaginationDetails"
    WalletTransactionsCollection:
      allOf:
        - type: object
          properties:
            balances:
              type: array
              items:
                $ref: "#/components/schemas/WalletTransactionsBalance"
            _embedded:
              type: object
              properties:
                transactions:
                  type: array
                  items:
                    $ref: "#/components/schemas/WalletTransactionsEntity"
              required:
                - transactions
          required:
            - _embedded
        - $ref: "#/components/schemas/PaginationDetails"
    WalletTransactionsBalance:
      type: object
      properties:
        currencyCode:
          $ref: "#/components/schemas/CurrencyFrom"
        openingBalance:
          $ref: "#/components/schemas/AmountInfoObject"
        closingBalance:
          $ref: "#/components/schemas/AmountInfoObject"
        totalCredits:
          $ref: "#/components/schemas/AmountInfoObject"
        totalDebits:
          $ref: "#/components/schemas/AmountInfoObject"
      required:
        - currencyCode
        - openingBalance
        - closingBalance
        - totalCredits
        - totalDebits
    WalletTransactionsEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IdParam'
        timestamp:
          type: string
          description: "Date of creation of the transaction in ISO 8601 format."
          format: datetime,
          example: "2020-04-07T10:05:46+01:00"
        type:
          type: string
          description: "Type of transaction"
          enum:
            - DEPOSIT
            - PENDING_DEPOSIT
            - CONFIRMED_DEPOSIT
            - DEPOSIT_FEE
            - TRANSFER
            - TRANSFER_FEE
            - TRADE_PLACE
            - TRADE_BUY
            - TRADE_SELL
            - TRADE_CANCEL
            - MANUAL
            - RAF_DEPOSIT
            - CANCEL_TRANSFER
            - CANCEL_FEE
            - RETURN_TRANSFER
            - RETURN_FEE
        currencyCode:
          $ref: "#/components/schemas/CurrencyFrom"
        amount:
          $ref: "#/components/schemas/AmountInfoObject"
        balance:
          $ref: "#/components/schemas/AmountInfoObject"
        summary:
          $ref: "#/components/schemas/FormattedMessageEntity"
        description:
          $ref: "#/components/schemas/FormattedMessageEntity"
        details:
          $ref: "#/components/schemas/SimpleObject"
      required:
        - id
        - timestamp
        - type
        - currencyCode
        - amount
        - balance
        - summary
        - description
        - details
    FormattedMessageEntity:
      type: object
      properties:
        raw:
          type: string
          description: Message without details interpolated. Keys inside curly brackets represent properties from the `details` property of the Wallet Transaction entity.
          example: 'Deposit from {description}'
        formatted:
          type: string
          description: Message with details interpolated.
          example: 'Deposit from John Doe'
      required:
        - raw
        - formatted
    WalletTransactionsExport:
      type: object
      properties:
        url:
          type: string
          format: uri
          description: A URL to an exported file. The file will likely *not* be available immediately. The export usually takes a couple of seconds.
      required:
        - url
  examples:
    NotFound:
      description: Example of not found entity.
      value:
        type: "http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
        title: Not Found
        status: 404
        detail: Country not found
    ValidationMessages:
      description: Example of an endpoint returning validation messages.
      value:
        validation_messages:
          iban:
            invalidIban: We can not verify your bank account details, please check and retry.
        type: "http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
        title: Unprocessable Entity
        status: 422
        detail: Could not add bank account
    FailureMessages:
      description: Example of an endpoint returning failure messages
      value:
        failure_messages:
          20: This order has already been placed
        type: "http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
        title: Unprocessable Entity
        status: 422
        detail: ''
    MfaRequired:
      description: Example of POST endpoint returning 401 with MFA details.
      value:
        mfa_messages:
          X-CF-MFA-REQUIRED: 1,
          X-CF-MFA-FOLLOWON-ID: 2626387
        type: "http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
        title: Unauthorized
        status: 401
        detail: ""
    OauthRequest:
      summary: Example OAuth request
      value:
        grant_type: authorization_code
        client_id: xsapi
        code: Wkmz8QBBP0Vwkp0wFuw3BUmoAZzeIORm9JpK1
